<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: XML | Functional Flow]]></title>
  <link href="http://functionalflow.co.uk/blog/tags/xml/atom.xml" rel="self"/>
  <link href="http://functionalflow.co.uk/"/>
  <updated>2014-08-11T14:10:30+01:00</updated>
  <id>http://functionalflow.co.uk/</id>
  <author>
    <name><![CDATA[Gustavo Guerra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Streaming XML input with XElementReader]]></title>
    <link href="http://functionalflow.co.uk/blog/2008/09/08/streaming-xml-input-with-xelementreader"/>
    <updated>2008-09-08T00:00:00+01:00</updated>
    <id>http://functionalflow.co.uk/blog/2008/09/08/streaming-xml-input-with-xelementreader</id>
    <content type="html"><![CDATA[<p>
    <strong>Updated on 2008/09/17</strong>: Fixed problem when skipping elements.<br />
    <strong>Updated on 2008/09/15</strong>: Fixed problem when trying to read missing attributes.</p>


<p>
    One of new features introduced in .NET 3.5 that I welcomed the most was LINQ to XML. The old DOM API was a bit clumsy to use, and the simple fact that you don&#39;t need owner documents any more makes the new XElement much more flexible and pleasant to work with than the old XmlElement.</p>


<p>
    Also new is an API for streaming XML output, XStreamingElement, that by using deferred execution gives you SAX-like performance on a DOM-like API. There&#39;s no streaming XML input API, though, so although you can now get away with not having to use XmlWriter any more, you&#39;ll still need to use XmlReader when you want good performance on large documents. During the LINQ to XML development, the XML Team considered such an API, but they decided not to do it for Orcas.</p>


<p>
    Fortunately, Ralf L&auml;mmel proposed such an API in <a href="http://homepages.cwi.nl/~ralf/api-streaming-xml/">API-based XML streaming with FLWOR power and functional updates</a>. I contacted him too ask if he could publicly release the code of his prototype, but he said he couldn&#39;t do it. Nevertheless, he kindly offered to help me develop a similar library myself, so with his help I implemented a small subset of the functionality he described in the paper. It took a while to get the corner cases right, but this is being used in a real-world scenario for some months now, so I think it&#39;s stable enough.</p>


<p>
    The interface is the following:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">XElementReader</span><span class="p">(</span><span class="kt">string</span> <span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="n">XElementReader</span><span class="p">(</span><span class="n">TextReader</span> <span class="n">reader</span><span class="p">);</span>
</span><span class='line'><span class="n">XElementReader</span><span class="p">(</span><span class="n">XmlReader</span> <span class="n">reader</span><span class="p">);</span>
</span><span class='line'><span class="n">XElementReader</span><span class="p">(</span><span class="n">Stream</span> <span class="n">stream</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">XName</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="kt">string</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">XAttribute</span> <span class="n">Attribute</span><span class="p">(</span><span class="n">XName</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">XAttribute</span><span class="p">&gt;</span> <span class="n">Attributes</span><span class="p">();&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">XElementReader</span> <span class="n">FirstElement</span><span class="p">();</span>
</span><span class='line'><span class="n">XElementReader</span> <span class="nf">Element</span><span class="p">(</span><span class="n">XName</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">XElementReader</span><span class="p">&gt;</span> <span class="n">Elements</span><span class="p">();</span>
</span><span class='line'><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">XElementReader</span><span class="p">&gt;</span> <span class="n">Elements</span><span class="p">(</span><span class="n">XName</span> <span class="n">name</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">XElement</span> <span class="n">ToXElement</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p></p>


<p>
    Although XElementReader looks a lot like a subset of XElement, you still have to remember that it&#39;s using a XmlReader underneath, so after you try to get to any child element, you have changed the reader position.</p>


<p>
    For example, if you have an element like &lt;Root&gt;&lt;A/&gt;&lt;B/&gt;&lt;A/&gt;&lt;B/&gt;&lt;/Root&gt; and call .Element(&quot;A&quot;) twice and then .Element(&quot;B&quot;) twice, the second call for B will return null. If you instead call .Elements(&quot;A&quot;) and then .Elements(&quot;B&quot;), you&#39;ll get two A elements, but no B elements at all. So to do this right, you have iterate on .Elements() and check the .Name property to see if you&#39;re in an A or in a B element.</p>


<p>
    This read once nature sometimes also complicates debugging. To help with that, you can define XML_DEBUG_MODE to force XElementReader to use a XElement behind the covers instead of a XmlReader, so you can add watches freely without worrying about side effects. But remember to fully test with this conditional compilation symbol off.</p>


<p>
    Here&#39;s the full code:</p>


<script src="https://gist.github.com/1225799.js"></script>

]]></content>
  </entry>
  
</feed>
