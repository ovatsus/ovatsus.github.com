<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: F# | Code Beside]]></title>
  <link href="http://blog.codebeside.org/blog/tags/f-/atom.xml" rel="self"/>
  <link href="http://blog.codebeside.org/"/>
  <updated>2013-11-10T21:52:34+00:00</updated>
  <id>http://blog.codebeside.org/</id>
  <author>
    <name><![CDATA[Gustavo Guerra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Higher order list operations across languages]]></title>
    <link href="http://blog.codebeside.org/blog/2013/11/10/higher-order-list-operations-across-languages"/>
    <updated>2013-11-10T21:55:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2013/11/10/higher-order-list-operations-across-languages</id>
    <content type="html"><![CDATA[<p>Did this table out of curiosity, decided to share it:</p>

<pre>
----------------------------------------------------------------------------------------------
| F#         | C#         | Scala       | Clojure | Python | Ruby     | Haskell   | SQL      |
|------------|------------|-------------|---------|--------|----------|-----------|----------|
| map        | Select     | map         | map     | map    | collect  | map       | Select   |
| filter     | Where      | filter      | filter  | filter | select   | filter    | Where    |
| fold       | Aggregate  | foldLeft    | reduce  | reduce | inject   | foldl     |          |
| foldBack   |            | foldRight   |         |        |          | foldr     |          |
| reduce     | Aggregate  | reduceLeft  | reduce  | reduce | inject   | foldl1    |          |
| reduceBack |            | reduceRight |         |        |          | foldr1    |          |
| collect    | SelectMany | flatMap     | mapcat  |        | flat_map | concatMap | From     |
| exists     | Any        | exists      | some    | any    | any?     | any       | Exists   |
| forall     | All        | forall      | every?  | all    | all?     | all       |          |
| sortBy     | OrderBy    | sortBy      | sort-by | sorted | sort_by  | sortBy    | Order By |
----------------------------------------------------------------------------------------------
</pre>


<p>PS: please correct me if I got something wrong</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# for Screen Scraping]]></title>
    <link href="http://blog.codebeside.org/blog/2013/10/14/fsharp-for-screen-scraping"/>
    <updated>2013-10-14T23:58:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2013/10/14/fsharp-for-screen-scraping</id>
    <content type="html"><![CDATA[<p>One of the many things F# is great for is screen scraping. Here's why:</p>

<ul>
<li>Downloading multiple pages asynchronously and in parallel is trivial with F#'s async support</li>
<li>Navigating the HTML DOM is a great fit for higher order data processing combined with partial application</li>
<li>F# Interactive really shines in iterative processes like this, where you try something out, see it didn't work quite well, and keep adjusting until you get it right. Doing a full compile-run cycle on each iteration instead of simply evaluating in the REPL would make this task take much more time-consuming</li>
</ul>


<p><a href="http://htmlagilitypack.codeplex.com/">Html Agility Pack</a> is the obvious candidate to use for screen scraping in .NET, but like other LINQ-like libraries that rely heavily on extension methods, its API isn't ideal for use in F#. A simple wrapper will take care of that problem:</p>

<!-- More -->


<p>{% codeblock lang:fsharp An F# wrapper for HtmlAgilityPack - HtmlAgilityPack.FSharp.fs %}
module HtmlAgilityPack.FSharp</p>

<p>open HtmlAgilityPack</p>

<p>type HtmlNode with</p>

<pre><code>member x.FollowingSibling name = 
    let sibling = x.NextSibling
    if sibling = null then
        null
    elif sibling.Name = name then
        sibling
    else 
        sibling.FollowingSibling name

member x.FollowingSiblings name = seq {
    let sibling = x.NextSibling
    if sibling &lt;&gt; null then
        if sibling.Name = name then
            yield sibling
        yield! sibling.FollowingSiblings name
}

member x.PrecedingSibling name = 
    let sibling = x.PreviousSibling
    if sibling = null then
        null
    elif sibling.Name = name then
        sibling
    else 
        sibling.PrecedingSibling name

member x.PrecedingSiblings name = seq {
    let sibling = x.PreviousSibling
    if sibling &lt;&gt; null then
        if sibling.Name = name then
            yield sibling
        yield! sibling.PrecedingSiblings name
}
</code></pre>

<p>let parent (node : HtmlNode) =</p>

<pre><code>node.ParentNode
</code></pre>

<p>let element name (node : HtmlNode) =</p>

<pre><code>node.Element name
</code></pre>

<p>let elements name (node : HtmlNode) =</p>

<pre><code>node.Elements name
</code></pre>

<p>let descendants name (node : HtmlNode) =</p>

<pre><code>node.Descendants name
</code></pre>

<p>let descendantsAndSelf name (node : HtmlNode) =</p>

<pre><code>node.DescendantsAndSelf name
</code></pre>

<p>let ancestors name (node : HtmlNode) =</p>

<pre><code>node.Ancestors name
</code></pre>

<p>let ancestorsAndSelf name (node : HtmlNode) =</p>

<pre><code>node.AncestorsAndSelf name
</code></pre>

<p>let followingSibling name (node : HtmlNode) =</p>

<pre><code>node.FollowingSibling name
</code></pre>

<p>let followingSiblings name (node : HtmlNode) =</p>

<pre><code>node.FollowingSiblings name
</code></pre>

<p>let precedingSibling name (node : HtmlNode) =</p>

<pre><code>node.PrecedingSibling name
</code></pre>

<p>let precedingSiblings name (node : HtmlNode) =</p>

<pre><code>node.PrecedingSiblings name
</code></pre>

<p>let inline innerText (node : HtmlNode) =</p>

<pre><code>node.InnerText
</code></pre>

<p>let inline attr name (node : HtmlNode) =</p>

<pre><code>node.GetAttributeValue(name, "")
</code></pre>

<p>let inline (?) (node : HtmlNode) name =</p>

<pre><code>attr name node
</code></pre>

<p>let inline hasAttr name value node =</p>

<pre><code>attr name node = value
</code></pre>

<p>let inline hasId value node =</p>

<pre><code>hasAttr "id" value node
</code></pre>

<p>let inline hasClass value node =</p>

<pre><code>hasAttr "class" value node
</code></pre>

<p>let inline hasText value (node : HtmlNode) =</p>

<pre><code>node.InnerText = value
</code></pre>

<p>let createDoc html =</p>

<pre><code>let doc = new HtmlDocument()
doc.LoadHtml html
doc.DocumentNode
</code></pre>

<p>{% endcodeblock %}</p>

<p>When we leave the "target" of an operation as the last parameter of a function, we can leverage partial application to remove the need to create anonymous lambdas when using higher order functions such as the ones needed for DOM traversing.</p>

<p>In this case, by taking the <code>this</code> parameter of the C# methods and putting it as the last parameter of our wrapper functions <code>elements</code>, <code>descendants</code>, <code>innerText</code>, etc., our code is now much easier to read and to understand than if we used the Html Agility Pack methods directly.</p>

<p>As an example, here is a small script that I used when developing one of my Windows Phone apps to get the list if all the rail stations in Ireland together with their coordinates:</p>

<p>{% codeblock lang:fsharp IrelandRailStations.fsx %}</p>

<h1>r "System.Net"</h1>

<h1>r "../lib/portable/FSharp.Data.dll"</h1>

<h1>r "../packages/HtmlAgilityPack-PCL.1.4.6/lib/HtmlAgilityPack-PCL.dll"</h1>

<h1>load "HtmlAgilityPack.FSharp.fs"</h1>

<p>// get a page that lists the stations that start with firstLetter
let getStationListPage firstLetter =</p>

<pre><code>"http://www.irishrail.ie/cat_stations_list.jsp?letter=" + (string firstLetter)
|&gt; Http.AsyncRequestString
</code></pre>

<p>// get all the links to stations inside the <ul class="results">
let getStations stationListPage =</p>

<pre><code>stationListPage
|&gt; createDoc
|&gt; descendants "ul"
|&gt; Seq.filter (hasClass "results")
|&gt; Seq.head
|&gt; descendants "a"
|&gt; Seq.map (attr "href")
|&gt; Seq.toArray
</code></pre>

<p>// get the page for a station
let getStationPage station =</p>

<pre><code>"http://www.irishrail.ie/" + station
|&gt; Http.AsyncRequestString
</code></pre>

<p>// get the latitude and longitude of a station from the google maps link in the station page
let getCoordinates stationPage =</p>

<pre><code>let googleMapsLink = 
    stationPage
    |&gt; createDoc
    |&gt; descendants "div"
    |&gt; Seq.filter (hasId "map-ordnance")
    |&gt; Seq.head
    |&gt; followingSibling "ul"
    |&gt; descendants "a"
    |&gt; Seq.head
    |&gt; attr "href"
let split (c:char) (s:string) = s.Split c
let [| "ll" ; coords |] =        
    Uri(googleMapsLink).Query
    |&gt; split '&amp;'
    |&gt; Seq.map (split '=')
    |&gt; Seq.filter (Seq.head &gt;&gt; (=) "ll")
    |&gt; Seq.head
let [| lat; long |] = coords |&gt; split ',' |&gt; Array.map float
lat, long
</code></pre>

<p>let stationsAndCoords =</p>

<pre><code>let stations = 
    ['A'..'Z'] 
    |&gt; Seq.map getStationListPage
    |&gt; Async.Parallel
    |&gt; Async.RunSynchronously
    |&gt; Array.collect getStations
let lat, long = 
    stations
    |&gt; Seq.map getStationPage
    |&gt; Async.Parallel
    |&gt; Async.RunSynchronously
    |&gt; Array.map getCoordinates
    |&gt; Array.unzip
let stations = 
    stations
    |&gt; Array.map Uri.UnescapeDataString
Array.zip3 stations lat long
</code></pre>

<p>{% endcodeblock %}</p>

<p>Output:</p>

<p>{% codeblock lang:fsharp %}
val stationsAndCoords : (string * float * float) [] =
  [|("Adamstown", 53.335285, -6.4523325); ("Ardrahan", 53.157177, -8.814831);</p>

<pre><code>("Arklow", 52.793163, -6.159939); ("Ashtown", 53.37552, -6.3313503);
("Athenry", 53.30153, -8.748547); ("Athlone", 53.427322, -7.9368286);
("Athy", 52.991997, -6.976196); ("Attymon", 53.321205, -8.606078);
...|]
</code></pre>

<p>{% endcodeblock %}</p>

<p>You can also see that the same pattern was used for making the <code>String.Split</code> function play well with partial application.</p>

<p>Another neat feature of F# for scripting (I wouldn't recommend incorporating it in production code), is the ability to de-structure arrays in one liners, as done in <code>let [| "ll" ; coords |] =</code> and <code>let [| lat; long |] =</code>. The compiler will emit a warning saying that the match is not exhaustive, telling us that this might backfire if there are less than two elements in the array, but for the purpose of a one shot script to download some data it's fine.</p>

<p>And to give a second example, here's a snippet from my Learn On The Go app that processes the html of the lecture videos page of a Coursera course:</p>

<p>{% codeblock lang:fsharp %}
let lectureSections =</p>

<pre><code>let trimAndUnescape (text:string) = text.Replace("&amp;nbsp;", "").Trim().Replace("&amp;amp;", "&amp;").Replace("&amp;quot;", "\"").Replace("apos;", "'").Replace("&amp;lt;", "&lt;").Replace("&amp;gt;", "&gt;")
let endsWith suffix (text:string) = text.EndsWith suffix
createDoc lecturesHtmlStr
|&gt; descendants "h3"
|&gt; Seq.map (fun h3 -&gt;
    let title = h3 |&gt; innerText |&gt; trimAndUnescape
    let completed = h3 |&gt; parent |&gt; hasClass "course-item-list-header contracted"
    let ul = 
        h3 
        |&gt; parent
        |&gt; followingSibling "ul"
    ul, title, completed)
|&gt; Seq.filter (fun (ul, _, _) -&gt; ul &lt;&gt; null)
|&gt; Seq.map (fun (ul, title, completed) -&gt; 
    let lectures =
        ul
        |&gt; elements "li"
        |&gt; Seq.map (element "a")
        |&gt; Seq.map (fun a -&gt;
            let id = a |&gt; attr "data-lecture-id" |&gt; int
            let title = innerText a |&gt; trimAndUnescape
            let quizAttemptedSpan = a |&gt; elements "span" |&gt; Seq.tryFind (hasClass "label label-success")
            let title, quizAttempted =
                match quizAttemptedSpan with
                | Some span -&gt;
                    title.Replace(trimAndUnescape span.InnerText, "").Trim(), true
                | None -&gt; title, false
            let videoUrl = a |&gt; attr "data-modal-iframe" 
            let lectureNotesUrl = 
                let urls = a |&gt; followingSibling "div" 
                             |&gt; elements "a" 
                             |&gt; Seq.map (attr "href") 
                match Seq.tryFind (endsWith ".pdf") urls with
                | Some url -&gt; url
                | _ -&gt; ""
            let viewed = a |&gt; parent |&gt; hasClass "viewed"
            { Id = id
              Title = title
              VideoUrl = videoUrl
              LectureNotesUrl = lectureNotesUrl
              Viewed = viewed 
              QuizAttempted = quizAttempted })
        |&gt; Seq.toArray
    { Title = title
      Completed = completed
      Lectures = lectures })
|&gt; Seq.toArray 
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FSharp.Data 1.1.9 released]]></title>
    <link href="http://blog.codebeside.org/blog/2013/07/21/fsharp-data-1-1-9-released"/>
    <updated>2013-07-21T22:14:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2013/07/21/fsharp-data-1-1-9-released</id>
    <content type="html"><![CDATA[<p>We've just released version <a href="http://www.nuget.org/packages/FSharp.Data/1.1.9">1.1.9</a> of <a href="http://fsharp.github.io/FSharp.Data/">FSharp.Data</a>, and I realized we've not been announcing new releases since version 1.1.1 when Tomas <a href="http://tomasp.net/blog/fsharp-data.aspx">first announced it</a>, so I though I'd rectify that. In addition to bug fixes, here what's has been added to FSharp.Data since then:</p>

<ul>
<li>The behaviour of CsvProvider can be fine tuned by using the HasHeaders, Schema, IgnoreErrors, SafeMode, and PreferOptionals parameters. See the CsvProvider documentation <a href="http://fsharp.github.io/FSharp.Data/library/CsvProvider.html">here</a>.</li>
<li>The CSV Parser and Reader can now be used standalone. See the CsvFile documentation <a href="http://fsharp.github.io/FSharp.Data/library/CsvFile.html">here</a>.</li>
<li>Guid types are now supported in CsvProvider, JsonProvider, and XmlProvider.</li>
<li>Support to disable caching for CSV files too big to fit in memory.</li>
<li>Support for cookies, binary files and client certificates in FSharp.Net.Http.</li>
<li>Save, Filter, Take, TakeWhile, Skip, SkipWhile, and Truncate operations for CsvProvider and CsvFile.</li>
<li>Support for Windows Phone 7.</li>
</ul>


<p>There's still a lot of room for improvement, and we love pull requests, so please contribute, even if it's only fixing a typo in the docs. A getting started guide is available <a href="http://fsharp.github.io/FSharp.Data/contributing.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Type Providers - Part 1]]></title>
    <link href="http://blog.codebeside.org/blog/2013/05/13/building-type-providers-part1"/>
    <updated>2013-05-13T00:17:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2013/05/13/building-type-providers-part1</id>
    <content type="html"><![CDATA[<p>Type Providers are the biggest new feature of F# 3.0. They allow us to leverage the power of the static type system in areas that have typically been the territory of dynamic languages and stringly typing. A picture is worth a thousand words, so here's 12 pictures that show type providers in action:</p>

<blockquote><p><a href="http://blogs.msdn.com/b/dsyme/archive/2013/01/30/twelve-type-providers-in-pictures.aspx">All your types are belong to us</a></p></blockquote>

<p>There are already several good samples and articles about using type providers, but there still isn't a lot about creating type providers. Having worked recently on <a href="http://fsharp.github.com/FSharp.Data/">FSharp.Data</a> I decided to share some tips about building type providers.</p>

<!-- More -->


<h2>Getting Started</h2>

<p>The basic steps to creating a type provider are:</p>

<ul>
<li><p>Get the <code>ProvidedTypes.fs</code> and <code>ProvidedTypes.fsi</code> files from the <a href="http://fsharp3sample.codeplex.com/">F# 3.0 Sample Pack</a> and add it to your project.</p></li>
<li><p>Follow the instructions in <a href="http://msdn.microsoft.com/en-gb/library/hh361034.aspx">Tutorial: Creating a Type Provider</a> to create instances of <code>ProvidedTypeDefinition</code>, <code>ProvidedProperty</code>, <code>ProvidedMethod</code>, etc. in order to to define the API you want.</p></li>
</ul>


<p>After you've read that tutorial, let's carry on...</p>

<h2>Hiding the underlying representation</h2>

<p>In the simplest of cases, there's no underlying representation, so you just set the base class of your provided types to <code>obj</code>. You'll create some expressions by wrapping code in <code>&lt;@@ ... @@&gt;</code> to create quotations, and assign them to the <code>InvokeCode</code> and <code>GetterCode</code> properties of your provided methods and properties, completely ignoring the <code>this</code> argument that is passed to them. After compilation, there will be no mention whatsoever of your provided types, they will have been all erased, and the only thing left is that code you defined inside the quotations. Effectively, the type providers are only giving you syntactic sugar and IntelliSense over things you could already accomplish without using them.</p>

<p>However, in most cases, there will be some underlying data representation, and you will probably want to create some types to hold that data. A big part of the logic will be in these types, and you'll specify them as the base classes of your provided types. In this case, the F# compiler will copy and embed those base types in the assembly that is consuming the type provider. This means that in addition to the syntactic sugar, the assembly that's referencing the type providers will also have some more additional code.</p>

<p>As expected, all the members of the base types will appear on the IntelliSense of the provided types. In some situations, that's a good thing, and exactly what you wanted. On other cases (and I would guess most of the time), you intended those members to be just internal code to be used inside the implementation of the provided methods and properties, and you don't want them to show up, as after all Type Providers are mostly about providing a nice API to its users. You can see this effect on the current version of the <a href="http://www.tryfsharp.org/Learn/data-science#world-bank-type-provider">World Bank type provider on TryF#</a>. If you press the dot after <code>data</code>, you'll see that in addition to <code>Countries</code> and <code>Regions</code>, the IntelliSense pop-up will also include <code>_GetCountries</code>, <code>_GetRegions</code> and other members that aren't intended for direct use. The ideal would be for them not to show up. How can we do that?</p>

<ul>
<li>If you came from an OO background, the first thing you'd think would be to make those members protected, but there is no <code>protected</code> modifier in F#. Even if there was, you're not really creating a type and inheriting from the base type, it's all erased.</li>
<li>You can't also make those members <code>internal</code>, because your runtime representation types are always considered to belong to the type provider assembly, and not to the assembly that is using the type provider, even when the F# compiler copies those types over.</li>
<li>In C#, you can decorate methods and properties with <code>[System.ComponentModel.Browsable(false)]</code> to have them not show up on IntelliSense, but unfortunately that doesn't work in F#.</li>
<li>You can create an interface with those members, and make your runtime representation types implement that interface. That way, they won't show up on IntelliSense because F# always does explicit interface implementation. This won't work for static members though.</li>
<li>The constructors of the erased to types don't show up on the IntelliSense, so you can replace some static members like <code>Parse</code> and <code>Load</code> with constructors instead.</li>
<li>If you define a <code>ProvidedMethod</code> with the same parameter types of one of the methods of the runtime representation type, just with a different return type, that method will effectively be hidden, and you won't need to do anything to hide it.</li>
<li><code>ProvidedTypeDefinition</code> has a <code>HideObjectMethods</code> property that allows you to hide the <code>GetHashCode()</code>, <code>GetType()</code>, <code>ToString()</code> and <code>Equals</code> methods from IntelliSense, but if the base type overrides any of those methods, they will show up anyway. I still haven't found a workaround for this.</li>
</ul>


<p>The <a href="http://fsharp.github.com/FSharp.Data/">FSharp.Data</a> version of the World Bank type provider (and this also applies to the CSV, XML, JSON and Freebase type providers) uses interfaces and constructors to hide the unwanted members, so you don't see any <code>_Something</code> method.</p>

<h2>Splitting into two assemblies</h2>

<p>When the type provider starts to get bigger, you might want to separate the runtime and design-time components into two separate assemblies. You also need to do this when you want to support multiple .NET framework profiles (like Silverlight or Portable Class Libraries), where you can have a single design-time assembly, but a different runtime assembly for each profile.</p>

<p>In this scenario, the design-time assembly can't just reference the runtime assembly, because there are multiple versions of them. And even if you're not supporting multiple profiles, the design-time assemblies of type providers are loaded inside the F# compiler process, which makes any assembly dependency for the design-time component to not work correctly. To work around this, usually there's no dependency between the design-time assembly and the runtime assembly, and instead we include all the files of the runtime assembly directly in the design-time assembly. This may increase the size of the design-time component, but it's not a big deal because that dll doesn't need to be included in the final application.</p>

<p>But with this solution, comes a big problem: your quotations will stop working. Why? Because you're referencing the types of the wrong assembly. To overcome this, the <code>TypeProviderConfig</code> that is passed to your type provider has a <code>RuntimeAssembly</code> property which allows you to load the runtime component using <code>Assembly.LoadFrom</code>, get the types you need using <code>Assembly.GetType</code>, and construct your expressions manually from that. Most of the samples in the <a href="http://fsharp3sample.codeplex.com/">F# 3.0 Sample Pack</a> use this. Great, problem solved, right?</p>

<p>Back in January, I started adding support for portable class libraries in <a href="http://fsharp.github.com/FSharp.Data/">FSharp.Data</a> because I wanted to use it on some Windows Phone and Windows 8 apps. After changing a couple of places from quotations to manually creating expression and using the reflection API, I though to myself:</p>

<blockquote><p>"No! The code was nice and clean with type safe quotations, and now I'm turning it to this mess with error prone reflection calls using a stringly typed api. It's a huge step back. There has to be a better way."</p></blockquote>

<p>And eventually after a couple of failed attempts and a lot of discussion on the github issue, I finally arrived at a solution: process the quotations to fix the type references to the right assembly. This is done by <code>AssemblyReplacer</code>, which you can find <a href="https://github.com/fsharp/FSharp.Data/blob/master/src/Providers/AssemblyReplacer.fs">here</a>. It's pretty much independent of the rest of <a href="http://fsharp.github.com/FSharp.Data/">FSharp.Data</a>, so you can just copy it over to your type provider project if you need it.</p>

<p>There are places where even without splitting the type provider into a design-time and runtime assembly, it isn't possible to use quotations, and you still need to keep creating expressions manually. That only happens when you use generics parameterized by a type generated by the type provider. For those, cases <a href="http://tomasp.net/">Tomas</a> has created a nice dynamic operator (?) implementation in <code>QuotationBuilder</code> which is available <a href="https://github.com/fsharp/FSharp.Data/blob/master/src/Providers/QuotationBuilder.fs">here</a>.</p>

<h2>Coming Next</h2>

<ul>
<li>Debugging type providers</li>
<li>Supporting multiple .NET framework profiles</li>
<li>Common errors found during type provider development</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F#, Windows Phone 7 & Visual Studio 2012]]></title>
    <link href="http://blog.codebeside.org/blog/2013/02/24/fsharp-windows-phone-7-visual-studio-2012"/>
    <updated>2013-02-24T00:00:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2013/02/24/fsharp-windows-phone-7-visual-studio-2012</id>
    <content type="html"><![CDATA[<p>F# 2.0 supported Silverlight 4, Silverlight 5, and Windows Phone 7.1, as several versions of FSharp.Core.dll were
shipped as part of the standalone F# redistribution. There were even some nice <a href="http://blogs.msdn.com/b/dsyme/archive/2010/08/20/f-windows-phone-7-silverlight-templates-now-on-visual-studio-gallery.aspx">Visual Studio 2010 templates</a> made by <a href="http://bloggemdano.blogspot.co.uk/">Daniel Mohl</a>.</p>

<p>In F# 3.0 there is no standalone redistributable package anymore, and Visual Studio 2012 only ships with two versions of FSharp.Core.dll: the full .NET 4.5 version, and a portable class library version targeting Profile47 (which includes .NET 4.5, Silverlight 5.0, and .NET for Windows Store apps).</p>

<p>I tried to create versions for Windows Phone 7 and for Profile88 (which additionally includes .NET 4.0, Silverlight 4.0, and Windows Phone 7.1) from the <a href="https://github.com/fsharp/fsharp">source code</a>, and I even got them to <a href="https://github.com/fsharp/fsharp/pull/102">compile</a>, but unfortunately I still get a bunch of Invalid Program exceptions at runtime when running on the emulator or on the device for both versions.</p>

<p>So I tried another approach - to reuse the FSharp.Core.dll version from F# 2.0 - and it seems to work just fine. Type providers and other new F# 3.0 features that depend on the library won't work, but at least we can use Visual Studio 2012 and some of the features like the triple quotes.</p>

<!-- more -->


<p>To make this work we must force the F# compiler to compile for Silverlight 4, which is no longer supported, so we need to modify the file <code>C:\Program Files (x86)\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.targets</code> and comment out the following lines:</p>

<p>{% codeblock lang:xml %}
&lt;Error</p>

<pre><code>Condition="'$(SilverlightVersion)' != '' and '$(SilverlightVersion)' != 'v5.0'"
Text="In this version of Visual Studio, F# for Silverlight can only target Silverlight v5.0. Use a prior version of Visual Studio to target previous versions of Silverlight with F#."
</code></pre>

<p>/>
{% endcodeblock %}</p>

<p>Then if you take Daniel Mohl's template, change the manifest to state it supports Visual Studio 2012, and upgrade the .csproj and .fsproj files, it all works. I've uploaded the updated template to the <a href="http://visualstudiogallery.msdn.microsoft.com/241d3a0a-a0a7-42f5-badf-bbbed30514c8">Visual Studio Gallery</a>.</p>

<p>Here's a small sample of loading some data asynchronously and databinding to a record:</p>

<p>{% codeblock F# Code lang:fsharp %}</p>

<p>type Topic =</p>

<pre><code>{ Id : int
  Name : string
  Icon : string }
</code></pre>

<p>let PopulateTopics (addTopic : Action<Topic>) (onFinish : Action) =</p>

<pre><code>let synchronizationContext = SynchronizationContext.Current

let doInUiThred f = 
    synchronizationContext.Post ((fun _ -&gt; f()), null)

async {
    let! topics = (...)
    for topic in topics do
        doInUiThred (fun () -&gt; addTopic.Invoke topic)
    doInUiThred (fun () -&gt; onFinish.Invoke())
} |&gt; Async.Catch |&gt; Async.Ignore |&gt; Async.Start
</code></pre>

<p>{% endcodeblock %}</p>

<p>{% codeblock XAML code lang:xml %}</p>

<p><Grid></p>

<pre><code>&lt;ScrollViewer&gt;
    &lt;ItemsControl x:Name="topicsList"&gt;
        &lt;ItemsControl.ItemTemplate&gt;
            &lt;DataTemplate&gt;
                &lt;Button Click="OnTopicButtonClick"&gt;
                    &lt;Grid&gt;
                        &lt;Image Source="{Binding Icon}" /&gt;
                        &lt;TextBlock Foreground="Black"
                                   FontWeight="Bold"
                                   FontSize="40"
                                   TextWrapping="Wrap"
                                   Text="{Binding Name}" /&gt;
                    &lt;/Grid&gt;
                &lt;/Button&gt;
            &lt;/DataTemplate&gt;
        &lt;/ItemsControl.ItemTemplate&gt;
    &lt;/ItemsControl&gt;
&lt;/ScrollViewer&gt;
&lt;TextBlock Margin="0,0,0,200" 
           HorizontalAlignment="Center" 
           VerticalAlignment="Center" 
           Text="Loading..." 
           Visibility="Collapsed" 
           x:Name="loading" /&gt;
</code></pre>

<p></Grid></p>

<p>{% endcodeblock %}</p>

<p>{% codeblock C# Code lang:csharp %}</p>

<p>private void OnLoaded(object sender, RoutedEventArgs e)
{</p>

<pre><code>loading.Visibility = Visibility.Visible;

var topics = new ObservableCollection&lt;Topic&gt;();
topicsList.ItemsSource = topics;

PopulateTopics(
    topic =&gt; topics.Add(topic),
    () =&gt; loading.Visibility = Visibility.Collapsed);
</code></pre>

<p>}</p>

<p>private void OnTopicButtonClick(object sender, RoutedEventArgs e)
{</p>

<pre><code>var topic = (Topic)((Button)sender).DataContext;
NavigationService.Navigate(new Uri("/TopicPage.xaml?id=" + topic.Id, UriKind.Relative));
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
