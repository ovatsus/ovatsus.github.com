<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: F# | Functional Flow]]></title>
  <link href="http://functionalflow.co.uk/blog/tags/f-/atom.xml" rel="self"/>
  <link href="http://functionalflow.co.uk/"/>
  <updated>2015-12-20T01:09:03+00:00</updated>
  <id>http://functionalflow.co.uk/</id>
  <author>
    <name><![CDATA[Gustavo Guerra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Importing Messages from Windows Phone to Android]]></title>
    <link href="http://functionalflow.co.uk/blog/2015/12/20/importing-messages-from-windows-phone-to-android"/>
    <updated>2015-12-20T01:05:00+00:00</updated>
    <id>http://functionalflow.co.uk/blog/2015/12/20/importing-messages-from-windows-phone-to-android</id>
    <content type="html"><![CDATA[<p>Searching around the web I couldn't find any way to to transfer messages from Windows Phone to Android that actually worked.</p>

<p>I could export all the data from Windows Phone using the <a href="https://www.microsoft.com/en-gb/store/apps/contacts-message-backup/9nblgggz57gm">contacts+message backup app</a>, but there was no Android app that understood that .msg format.</p>

<p>However, I found the <a href="https://play.google.com/store/apps/details?id=com.riteshsahu.SMSBackupRestore&amp;hl=en">SMS Backup &amp; Restore app</a> that seemed to work well for exporting/importing messages between Android devices.</p>

<p>So with a bit of trial and error and the help of the <a href="http://fsharp.github.io/FSharp.Data/library/XmlProvider.html">XML Type Provider</a> I managed to create an F# script to convert from one format to another.</p>

<p>The trickier part was trying to figure out what DateTime format was being used in both cases (thanks <a href="https://twitter.com/LincolnAtkinson/status/678314345508433921">Lincoln</a>), all the rest was pretty straightforward. The .msg format has a lot less fields than the .xml format used by the Android app, but it ended up still working ok with those missing fields.</p>

<p>It converts both SMS and MMS, though it only retains the text and photos from the MMS's, vCards, embedded location maps and other items are skipped. but it should be fairly easy to add that support if needed.</p>

<p>Here is the code:</p>

<script src="https://gist.github.com/ovatsus/2dd82172dcd8308d559c.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maintaining backwards compatibility when changing APIs in F#]]></title>
    <link href="http://functionalflow.co.uk/blog/2014/03/22/maintaining-backwards-compatibility-when-changing-apis-in-fsharp"/>
    <updated>2014-03-22T18:41:00+00:00</updated>
    <id>http://functionalflow.co.uk/blog/2014/03/22/maintaining-backwards-compatibility-when-changing-apis-in-fsharp</id>
    <content type="html"><![CDATA[<h3>Classes</h3>

<p>By now, mostly everyone already knows how to change the internal representation of a class without breaking compatibility. In C#:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Rectangle</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="n">Point</span> <span class="n">TopLeft</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="n">Point</span> <span class="n">BottomRight</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="nf">Rectangle</span><span class="p">(</span><span class="n">Point</span> <span class="n">topLeft</span><span class="p">,</span> <span class="n">Point</span> <span class="n">bottomRight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TopLeft</span> <span class="p">=</span> <span class="n">topLeft</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BottomRight</span> <span class="p">=</span> <span class="n">bottomRight</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// After</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Rectangle</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="n">Point</span> <span class="n">TopLeft</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="n">Point</span> <span class="n">Size</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="nf">Rectangle</span><span class="p">(</span><span class="n">Point</span> <span class="n">topLeft</span><span class="p">,</span> <span class="n">Size</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TopLeft</span> <span class="p">=</span> <span class="n">topLeft</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Size</span> <span class="p">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for backwards compatibility:</span>
</span><span class='line'><span class="k">public</span> <span class="nf">Rectangle</span><span class="p">(</span><span class="n">Point</span> <span class="n">topLeft</span><span class="p">,</span> <span class="n">Point</span> <span class="n">bottomRight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TopLeft</span> <span class="p">=</span> <span class="n">topLeft</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">bottomRight</span><span class="p">.</span><span class="n">X</span> <span class="p">-</span> <span class="n">topLeft</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="n">bottomRight</span><span class="p">.</span><span class="n">Y</span> <span class="p">-</span> <span class="n">topLeft</span><span class="p">.</span><span class="n">Y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for backwards compatibility:</span>
</span><span class='line'><span class="k">public</span> <span class="n">Point</span> <span class="n">BottomRight</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">TopLeft</span><span class="p">.</span><span class="n">X</span> <span class="p">+</span> <span class="n">Size</span><span class="p">.</span><span class="n">Width</span><span class="p">,</span> <span class="n">TopLeft</span><span class="p">.</span><span class="n">Y</span> <span class="p">+</span> <span class="n">Size</span><span class="p">.</span><span class="n">Height</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and in F#:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">member</span> <span class="o">__.</span><span class="nc">TopLeft</span> <span class="o">=</span> <span class="n">topLeft</span>
</span><span class='line'><span class="k">member</span> <span class="o">__.</span><span class="nc">BottomRight</span> <span class="o">=</span> <span class="n">bottomRight</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// After</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span><span class="o">,</span> <span class="n">size</span><span class="o">:</span><span class="nc">Size</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">member</span> <span class="o">__.</span><span class="nc">TopLeft</span> <span class="o">=</span> <span class="n">topLeft</span>
</span><span class='line'><span class="k">member</span> <span class="o">__.</span><span class="nc">Size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for backwards compatibility:</span>
</span><span class='line'><span class="k">new</span> <span class="o">(</span><span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="nc">Point</span><span class="o">(</span><span class="n">bottomRight</span><span class="o">.</span><span class="nc">X</span> <span class="o">-</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">X</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">.</span><span class="nc">Y</span> <span class="o">-</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">Y</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for backwards compatibility:</span>
</span><span class='line'><span class="k">member</span> <span class="o">__.</span><span class="nc">BottomRight</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Point</span><span class="o">(</span><span class="n">topLeft</span><span class="o">.</span><span class="nc">X</span> <span class="o">+</span> <span class="n">size</span><span class="o">.</span><span class="nc">Width</span><span class="o">,</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">Y</span> <span class="o">+</span> <span class="n">size</span><span class="o">.</span><span class="nc">Height</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Records</h3>

<p>When using record types, things are a little bit more tricky, though:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;{</span> <span class="nc">TopLeft</span> <span class="o">:</span> <span class="nc">Point</span>
</span><span class='line'>  <span class="nc">BottomRight</span> <span class="o">:</span> <span class="nc">Point</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// After</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;{</span> <span class="nc">TopLeft</span> <span class="o">:</span> <span class="nc">Point</span>
</span><span class='line'>  <span class="nc">Size</span> <span class="o">:</span> <span class="nc">Size</span> <span class="o">}</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">BottomRight</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nn">TopLeft</span><span class="p">.</span><span class="nc">X</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="nn">Size</span><span class="p">.</span><span class="nc">Width</span><span class="o">,</span> <span class="n">x</span><span class="o">.</span><span class="nn">TopLeft</span><span class="p">.</span><span class="nc">Y</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="nn">Size</span><span class="p">.</span><span class="nc">Height</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This change will keep working at the usages of Rectangle, but not at creation, as there isn't a way (at least that I know of) to make something like <code>{ TopLeft = Point(2.5, 3.0); BottomRight = Point(4.0, 7.5) }</code> keep working. This can be avoided if we originally had hidden the fact that Rectangle was representation as a record, like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">private</span> <span class="o">{</span> <span class="nc">TL</span> <span class="o">:</span> <span class="nc">Point</span>
</span><span class='line'>          <span class="nc">BR</span> <span class="o">:</span> <span class="nc">Point</span> <span class="o">}</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TopLeft</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">TL</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">BottomRight</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">BR</span>
</span><span class='line'><span class="k">static</span> <span class="k">member</span> <span class="nc">Create</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">TL</span> <span class="o">=</span> <span class="n">topLeft</span><span class="o">;</span> <span class="nc">BR</span> <span class="o">=</span> <span class="n">bottomRight</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But for me this seems to defeat some of the advantages of using a record in the first place. You still get structural equality and pretty printing for free, which classes don't have, but you lose the nice pattern matching and type inference capabilities that usually come with records.</p>

<h3>Single case discriminated unions</h3>

<p>The situation for discriminated unions is better, though. For each changed case, you can use one active pattern and a function to maintain backward compatibility:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;|</span> <span class="nc">Rectange</span> <span class="k">of</span> <span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span> <span class="o">*</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// After</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;|</span> <span class="nc">Rectangle2</span> <span class="k">of</span> <span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span> <span class="o">*</span> <span class="n">size</span><span class="o">:</span><span class="nc">Size</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// for backwards compatibility:</span>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Rectangle</span><span class="o">|)</span> <span class="n">x</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Rectangle2</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="n">size</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">topLeft</span><span class="o">,</span> <span class="nc">Point</span><span class="o">(</span><span class="n">topLeft</span><span class="o">.</span><span class="nc">X</span> <span class="o">+</span> <span class="n">size</span><span class="o">.</span><span class="nc">Width</span><span class="o">,</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">Y</span> <span class="o">+</span> <span class="n">size</span><span class="o">.</span><span class="nc">Height</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// for backwards compatibility:</span>
</span><span class='line'><span class="k">let</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span><span class="o">)</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">Rectangle2</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="nc">Size</span><span class="o">(</span><span class="n">bottomRight</span><span class="o">.</span><span class="nc">X</span> <span class="o">-</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">X</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">.</span><span class="nc">Y</span> <span class="o">-</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">Y</span><span class="o">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The downside is that the new discriminated union case has to have a new name, otherwise the function for backward compatibility will shadow the case constructor. This might not necessarily be a bad thing, though.</p>

<p>We could also make the discriminated union representation private, like we did for the record:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">private</span> <span class="o">|</span> <span class="nc">Rectangle</span> <span class="k">of</span> <span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span> <span class="o">*</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TopLeft</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="o">_)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">topLeft</span>
</span><span class='line'><span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">BottomRight</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Rectangle</span><span class="o">(_,</span> <span class="n">bottomRight</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">bottomRight</span>
</span><span class='line'><span class="k">static</span> <span class="k">member</span> <span class="nc">Create</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When we're deciding between using a record or a single case discriminated union, these considerations might help decide.</p>

<h3>Multiple case discriminated unions</h3>

<p>When we have discriminated unions with multiple cases, the same technique also applies, but now we need to use partial active patterns instead (<code>(|Pattern|_|)</code> returning an option instead of <code>(|Pattern|)</code> returning the type directly). Here's an example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">JsonValue</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;|</span> <span class="nc">String</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Number</span> <span class="k">of</span> <span class="kt">decimal</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Float</span> <span class="k">of</span> <span class="kt">float</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Object</span> <span class="k">of</span> <span class="nc">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">string</span><span class="o">,</span> <span class="nc">JsonValue</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Array</span> <span class="k">of</span> <span class="nc">JsonValue</span><span class="bp">[]</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Boolean</span> <span class="k">of</span> <span class="kt">bool</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Null</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// After</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">JsonValue</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;|</span> <span class="nc">String</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Number</span> <span class="k">of</span> <span class="kt">decimal</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Float</span> <span class="k">of</span> <span class="kt">float</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Record</span> <span class="k">of</span> <span class="n">properties</span><span class="o">:(</span><span class="kt">string</span><span class="o">*</span><span class="nc">JsonValue</span><span class="o">)</span><span class="bp">[]</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Array</span> <span class="k">of</span> <span class="n">elements</span><span class="o">:</span><span class="nc">JsonValue</span><span class="bp">[]</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Boolean</span> <span class="k">of</span> <span class="kt">bool</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Null</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;[&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nc">CompilationRepresentation</span><span class="o">(</span><span class="nn">CompilationRepresentationFlags</span><span class="p">.</span><span class="nc">ModuleSuffix</span><span class="o">)&gt;]</span>
</span><span class='line'><span class="k">module</span> <span class="nc">JsonValue</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;[&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nc">Obsolete</span><span class="o">(</span><span class="s2">&quot;Please use JsonValue.Record instead&quot;</span><span class="o">)&amp;</span><span class="n">gt</span><span class="o">;]</span>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Object</span><span class="o">|_|)</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nn">JsonValue</span><span class="p">.</span><span class="nc">Record</span> <span class="n">properties</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofArray</span> <span class="n">properties</span> <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Some</span>
</span><span class='line'>    <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nc">Obsolete</span><span class="o">(</span><span class="s2">&quot;Please use JsonValue.Record instead&quot;</span><span class="o">)&amp;</span><span class="n">gt</span><span class="o">;]</span>
</span><span class='line'><span class="k">let</span> <span class="nc">Object</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">toArray</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">JsonValue</span><span class="p">.</span><span class="nc">Record</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this example, because <code>[&lt;RequireQualifiedAccess&gt;]</code> was being used, we have to include the active pattern and the compatibility function in a module, and use <code>[&lt;CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)&gt;]</code> to be able to maintain the exact same syntax. We also marked the backward compatibility constructs with the <code>Obsolete</code> attribute because we don't want new users to be using the old discriminated union case. This attribute will make sure the old case doesn't show up in IntelliSense, and will also issue a warning to old users.</p>

<p>There's one extra caveat, though. Consider the following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">f</span> <span class="n">x</span> <span class="o">=&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="nc">String</span> <span class="n">s</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Number</span> <span class="n">n</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Float</span> <span class="n">f</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Object</span> <span class="n">properties</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Array</span> <span class="n">a</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Boolean</span> <span class="n">b</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Null</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Even though we're handling all the cases, we get a warning stating <strong>this pattern-matching is not exhaustive</strong>. This is because the compiler doesn't know what <code>Object</code> will match on: it's a custom defined partial active pattern, so the implementation could match on multiple cases or even none at all.</p>

<h3>Final thoughts</h3>

<p>In all of the above we were only concerned with source compatibility. Binary compatibility has other concerns that would require further exploration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# named union fields]]></title>
    <link href="http://functionalflow.co.uk/blog/2014/03/21/fsharp-named-union-fields"/>
    <updated>2014-03-21T22:37:00+00:00</updated>
    <id>http://functionalflow.co.uk/blog/2014/03/21/fsharp-named-union-fields</id>
    <content type="html"><![CDATA[<p>One of the new features in F# 3.1, and one that I really like, is the possibility to name fields of discriminated unions. From the <a href="http://blogs.msdn.com/b/fsharpteam/archive/2013/06/27/announcing-a-pre-release-of-f-3-1-and-the-visual-f-tools-in-visual-studio-2013.aspx">F# 3.1 announcement blog post</a>:</p>

<blockquote><p>Discriminated union types are a powerful feature of F# which make programming with shaped data simple, accurate and robust. They also greatly reduce the number of classes needed to represent data in many common circumstances.</p>

<p>In F# 3.1, it is now possible to name union fields within each case of a union type. This is important for large-scale software engineering, particularly when union cases have a large number of fields or multiple fields with the same type.</p>

<p><img src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-39-71-metablogapi/2021.31blog_5F00_1_5F00_0EEA8EAA.png" alt="" /></p></blockquote>

<p>What wasn't originally mentioned on that post, I just found out today, is that pattern match by name is not limited to a single element of the case: we can match on multiple elements by separating them by <code>;</code>.</p>

<p>When we pattern match by position, the several elements are separated by <code>,</code>, and as that didn't work with union field names, I assumed it wasn't possible to do at all. But it turns out it is possible if you use <code>;</code> instead. Here's an example taken from F# Data:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">InferedType</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Primitive</span> <span class="k">of</span> <span class="n">typ</span><span class="o">:</span><span class="nn">System</span><span class="p">.</span><span class="nc">Type</span> <span class="o">*</span> <span class="kt">unit</span><span class="o">:</span><span class="n">option</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">&gt;</span> <span class="o">*</span> <span class="n">optional</span><span class="o">:</span><span class="kt">bool</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">...&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// positional pattern match:</span>
</span><span class='line'><span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Primitive</span><span class="o">(</span><span class="n">typ</span><span class="o">,</span> <span class="o">_,</span> <span class="bp">false</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="o">...&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// pattern match by name</span>
</span><span class='line'><span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Primitive</span><span class="o">(</span><span class="n">typ</span> <span class="o">=</span> <span class="n">typ</span><span class="o">;</span> <span class="n">optional</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">...</span>  <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">|</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FSharp.Data 2.0.0 released]]></title>
    <link href="http://functionalflow.co.uk/blog/2014/03/10/fsharp-data-2-0-0-released"/>
    <updated>2014-03-10T02:00:00+00:00</updated>
    <id>http://functionalflow.co.uk/blog/2014/03/10/fsharp-data-2-0-0-released</id>
    <content type="html"><![CDATA[<p>Version <a href="http://www.nuget.org/packages/FSharp.Data/2.0.0">2.0.0</a> of <a href="http://fsharp.github.io/FSharp.Data/">FSharp.Data</a> was just released. You can get the full version history on the <a href="https://github.com/fsharp/FSharp.Data/blob/master/RELEASE_NOTES.md">release notes</a>, but here are the highlights:</p>

<ul>
<li>A new type inference algorithm that will generate better and more robust API's in the presence of missing and heterogeneous types. This means that you'll get much less errors when using JsonProvider and XmlProvider on real world messy files. The error messages are now also more descriptive when things go wrong.</li>
<li>Much improved Freebase support for individuals.</li>
<li>The functionality of the Http class was greatly extended. It now supports uploading and downloading binary files, and compression across all supported platforms, among many other tweaks.</li>
<li>Improved the overall performance of the type provider itself when running inside the editor, and also of the generated code.</li>
<li>The documentation was much improved, there's now a Japanese translation of it, and comprehensive reference documentation.</li>
<li>Mono is now fully supported, as well as F# 3.1, and the new Portable Class Library profile 7.</li>
<li>Source link support. This means that you can step trough the source code while debugging if you enable that feature in Visual Studio.</li>
</ul>


<p>We also took the opportunity of major version bump to do some house cleaning, so things that we weren't previously very happy with were renamed, dropped or, shuffled around. Unfortunately this means breaking changes, but we think the overall outcome is positive. In this process we dropped support for:</p>

<ul>
<li>Silverlight and Windows Phone separate packages.</li>
<li>Apiary provider (which has now moved to a <a href="https://github.com/fsprojects/ApiaryProvider">separate project</a>).</li>
</ul>


<p>Thanks to everyone which contributed directly to this release, <a href="http://github.com/tpetricek">Tomas Petricek</a>, <a href="http://github.com/dsyme">Don Syme</a>, <a href="http://github.com/forki">Steffen Forkmann</a>, <a href="http://github.com/enricosada">Enrico Sada</a>, <a href="http://github.com/ctaggart">Cameron Taggart</a>, <a href="http://github.com/remkoboschker">Remko Boschker</a>, <a href="http://github.com/vasily-kirichenko">Vasily Kirichenko</a>, <a href="http://github.com/diegofrata">Diego Frata</a>, <a href="http://github.com/yukitos">yukitos</a>, <a href="http://github.com/OkayX6">Denis Ok</a>, and <a href="http://github.com/jamesholwell">James Holwell</a>, and also to everyone who also contributed indirectly through yak-shaving needed in <a href="http://tpetricek.github.io/FSharp.Formatting">FSharp.Formatting</a>, <a href="http://fsharp.github.io/FSharp.Compiler.Service">FSharp.Compiler.Services</a>, and <a href="http://fsharp.github.io/FAKE">FAKE</a>, including <a href="http://github.com/7sharp9">Dave Thomas</a>, <a href="http://github.com/soloman817">Xiang Zhang</a>, <a href="http://github.com/dungpa">Anh-Dung Phan</a>, <a href="http://github.com/fbmnds">fbmnds</a>, and <a href="http://github.com/mexx">Max Malook</a>. And also thanks to everyone who contributed by just placing issues on github, but I couldn't find a way to generate a list of all of you.</p>

<p>There's still a lot of room for improvement, and we love pull requests, so please contribute, even if it's only fixing a typo in the docs. A getting started guide is available <a href="http://fsharp.github.io/FSharp.Data/contributing.html">here</a>.</p>

<p>For the next versions, we want to add:</p>

<ul>
<li>Html type provider, currently being worked on by <a href="http://github.com/colinbull">Colin Bull</a>, <a href="http://github.com/mathias-brandewinder">Mathias Brandewinder</a> and me.</li>
<li>Write API for Json, currently being worked on by <a href="http://github.com/pezipink">Ross McKinlay</a>.</li>
<li>Authentication support, currently being worked on by <a href="http://github.com/veikkoeeva">Veikko Eeva</a>.</li>
<li>XSD support, which I hope one of you reading this will pick up :).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Higher order list operations across languages]]></title>
    <link href="http://functionalflow.co.uk/blog/2013/11/10/higher-order-list-operations-across-languages"/>
    <updated>2013-11-10T21:55:00+00:00</updated>
    <id>http://functionalflow.co.uk/blog/2013/11/10/higher-order-list-operations-across-languages</id>
    <content type="html"><![CDATA[<p>Did this table out of curiosity, decided to share it:</p>

<pre>
----------------------------------------------------------------------------------------------
| F#         | C#         | Scala       | Clojure | Python | Ruby     | Haskell   | SQL      |
|------------|------------|-------------|---------|--------|----------|-----------|----------|
| map        | Select     | map         | map     | map    | collect  | map       | Select   |
| filter     | Where      | filter      | filter  | filter | select   | filter    | Where    |
| fold       | Aggregate  | foldLeft    | reduce  | reduce | inject   | foldl     |          |
| foldBack   |            | foldRight   |         |        |          | foldr     |          |
| reduce     | Aggregate  | reduceLeft  | reduce  | reduce | inject   | foldl1    |          |
| reduceBack |            | reduceRight |         |        |          | foldr1    |          |
| collect    | SelectMany | flatMap     | mapcat  |        | flat_map | concatMap | From     |
| exists     | Any        | exists      | some    | any    | any?     | any       | Exists   |
| forall     | All        | forall      | every?  | all    | all?     | all       |          |
| sortBy     | OrderBy    | sortBy      | sort-by | sorted | sort_by  | sortBy    | Order By |
----------------------------------------------------------------------------------------------
</pre>


<p>PS: please correct me if I got something wrong</p>
]]></content>
  </entry>
  
</feed>
