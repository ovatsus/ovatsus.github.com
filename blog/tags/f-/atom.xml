<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: F# | Code Beside]]></title>
  <link href="http://blog.codebeside.org/blog/tags/f-/atom.xml" rel="self"/>
  <link href="http://blog.codebeside.org/"/>
  <updated>2013-04-11T13:37:39+01:00</updated>
  <id>http://blog.codebeside.org/</id>
  <author>
    <name><![CDATA[Gustavo Guerra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[F#, Windows Phone 7 & Visual Studio 2012]]></title>
    <link href="http://blog.codebeside.org/blog/2013/02/24/fsharp-windows-phone-7-visual-studio-2012"/>
    <updated>2013-02-24T00:00:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2013/02/24/fsharp-windows-phone-7-visual-studio-2012</id>
    <content type="html"><![CDATA[<p>F# 2.0 supported Silverlight 4, Silverlight 5, and Windows Phone 7.1, as several versions of FSharp.Core.dll were
shipped as part of the standalone F# redistribution. There were even some nice <a href="http://blogs.msdn.com/b/dsyme/archive/2010/08/20/f-windows-phone-7-silverlight-templates-now-on-visual-studio-gallery.aspx">Visual Studio 2010 templates</a> made by <a href="http://bloggemdano.blogspot.co.uk/">Daniel Mohl</a>.</p>

<p>In F# 3.0 there is no standalone redistributable package anymore, and Visual Studio 2012 only ships with two versions of FSharp.Core.dll: the full .NET 4.5 version, and a portable class library version targeting Profile47 (which includes .NET 4.5, Silverlight 5.0, and .NET for Windows Store apps).</p>

<p>I tried to create versions for Windows Phone 7 and for Profile88 (which additionally includes .NET 4.0, Silverlight 4.0, and Windows Phone 7.1) from the <a href="https://github.com/fsharp/fsharp">source code</a>, and I even got them to <a href="https://github.com/fsharp/fsharp/pull/102">compile</a>, but unfortunately I still get a bunch of Invalid Program exceptions at runtime when running on the emulator or on the device for both versions.</p>

<p>So I tried another approach - to reuse the FSharp.Core.dll version from F# 2.0 - and it seems to work just fine. Type providers and other new F# 3.0 features that depend on the library won't work, but at least we can use Visual Studio 2012 and some of the features like the triple quotes.</p>

<!-- more -->


<p>To make this work we must force the F# compiler to compile for Silverlight 4, which is no longer supported, so we need to modify the file <code>C:\Program Files (x86)\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.targets</code> and comment out the following lines:</p>

<p>{% codeblock lang:xml %}
&lt;Error</p>

<pre><code>Condition="'$(SilverlightVersion)' != '' and '$(SilverlightVersion)' != 'v5.0'"
Text="In this version of Visual Studio, F# for Silverlight can only target Silverlight v5.0. Use a prior version of Visual Studio to target previous versions of Silverlight with F#."
</code></pre>

<p>/>
{% endcodeblock %}</p>

<p>Then if you take Daniel Mohl's template, change the manifest to state it supports Visual Studio 2012, and upgrade the .csproj and .fsproj files, it all works. I've uploaded the updated template to the <a href="http://visualstudiogallery.msdn.microsoft.com/241d3a0a-a0a7-42f5-badf-bbbed30514c8">Visual Studio Gallery</a>.</p>

<p>Here's a small sample of loading some data asynchronously and databinding to a record:</p>

<p>{% codeblock F# Code lang:fsharp %}</p>

<p>type Topic =</p>

<pre><code>{ Id : int
  Name : string
  Icon : string }
</code></pre>

<p>let PopulateTopics (addTopic : Action<Topic>) (onFinish : Action) =</p>

<pre><code>let synchronizationContext = SynchronizationContext.Current

let doInUiThred f = 
    synchronizationContext.Post ((fun _ -&gt; f()), null)

async {
    let! topics = (...)
    for topic in topics do
        doInUiThred (fun () -&gt; addTopic.Invoke topic)
    doInUiThred (fun () -&gt; onFinish.Invoke())
} |&gt; Async.Catch |&gt; Async.Ignore |&gt; Async.Start
</code></pre>

<p>{% endcodeblock %}</p>

<p>{% codeblock XAML code lang:xml %}</p>

<p><Grid></p>

<pre><code>&lt;ScrollViewer&gt;
    &lt;ItemsControl x:Name="topicsList"&gt;
        &lt;ItemsControl.ItemTemplate&gt;
            &lt;DataTemplate&gt;
                &lt;Button Click="OnTopicButtonClick"&gt;
                    &lt;Grid&gt;
                        &lt;Image Source="{Binding Icon}" /&gt;
                        &lt;TextBlock Foreground="Black"
                                   FontWeight="Bold"
                                   FontSize="40"
                                   TextWrapping="Wrap"
                                   Text="{Binding Name}" /&gt;
                    &lt;/Grid&gt;
                &lt;/Button&gt;
            &lt;/DataTemplate&gt;
        &lt;/ItemsControl.ItemTemplate&gt;
    &lt;/ItemsControl&gt;
&lt;/ScrollViewer&gt;
&lt;TextBlock Margin="0,0,0,200" 
           HorizontalAlignment="Center" 
           VerticalAlignment="Center" 
           Text="Loading..." 
           Visibility="Collapsed" 
           x:Name="loading" /&gt;
</code></pre>

<p></Grid></p>

<p>{% endcodeblock %}</p>

<p>{% codeblock C# Code lang:csharp %}</p>

<p>private void OnLoaded(object sender, RoutedEventArgs e)
{</p>

<pre><code>loading.Visibility = Visibility.Visible;

var topics = new ObservableCollection&lt;Topic&gt;();
topicsList.ItemsSource = topics;

PopulateTopics(
    topic =&gt; topics.Add(topic),
    () =&gt; loading.Visibility = Visibility.Collapsed);
</code></pre>

<p>}</p>

<p>private void OnTopicButtonClick(object sender, RoutedEventArgs e)
{</p>

<pre><code>var topic = (Topic)((Button)sender).DataContext;
NavigationService.Navigate(new Uri("/TopicPage.xaml?id=" + topic.Id, UriKind.Relative));
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# as a Octave/Matlab replacement for Machine Learning]]></title>
    <link href="http://blog.codebeside.org/blog/2011/10/27/f-as-a-octavematlab-replacement-for-machine-learning"/>
    <updated>2011-10-27T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2011/10/27/f-as-a-octavematlab-replacement-for-machine-learning</id>
    <content type="html"><![CDATA[<p>
    <strong>EDIT</strong>: As another version of the ml-class course has started, I&#39;ve made the repository private</p>


<p>
    Back when I was in college, I took three different courses that dealt with subjects related to machine learning and data mining. Although I didn&rsquo;t lose interest on those matters, my work has led me in a totally unrelated direction, so I haven&rsquo;t exercised any of that knowledge in about eight years or so. A few weeks ago, I stumbled upon Stanford&rsquo;s online class on <a href="http://www.ml-class.org">Machine Learning</a> and decided to enroll. I want to revive many of the things I have forgotten and try to put them into practice, as nowadays it&rsquo;s very easy to access large amounts of interesting data from all kinds of online sources.</p>


<p>
    The programming exercises of this class are supposed to be done in Octave or Matlab, and while I understand the advantages of these tools, my past experience (where all the exercises and projects were done either with SAS or with Matlab) shows me that not using a general purpose programming languages doesn&rsquo;t help a lot in turning academic exercises into real world programs. As professor Andrew Ng said in the introduction, one of the goals of the class is for us to put machine learning into practice in real world problems we care about, so I decided that I&rsquo;ll implement all the algorithms and exercises in F#.</p>


<pre><code>&lt;!-- more --&gt;
</code></pre>

<p>
    I&rsquo;m using <a href="http://numerics.mathdotnet.com/">Math.NET Numerics</a> for the linear algebra and statistics, and while some operations are not as simple as in Octave, being able to use higher order functions instead of for loops compensates for it. As an example, look at the code for feature normalization in Octave:</p>


<p>{% codeblock lang:matlab %}
function [X_norm, mu, sigma] = featureNormalize(X)</p>

<p>X_norm = X;</p>

<p>mu = mean(X);
sigma = std(X);</p>

<p>m = size(X, 1);
for i = 1:m</p>

<pre><code>X_norm(i,:) = (X(i,:) - mu) ./ sigma;
</code></pre>

<p>end</p>

<p>end
{% endcodeblock %}</p>

<p>
    And here&rsquo;s the equivalent F# code:</p>


<p>{% codeblock lang:fsharp %}
let featureNormalize (X: #Matrix<float>) =</p>

<pre><code>let μ = 
    X.ColumnEnumerator() 
    |&gt; Seq.map (fun (j, col) -&gt; col.Mean()) 
    |&gt; DenseVector.ofSeq

let σ = 
    X.ColumnEnumerator() 
    |&gt; Seq.map (fun (j, col) -&gt; col.StandardDeviation()) 
    |&gt; DenseVector.ofSeq    

let X = 
    X |&gt; Matrix.mapRows (fun i row -&gt; (row - μ) ./ σ)

(X, μ, σ)
</code></pre>

<p>{% endcodeblock %}</p>

<p>
    Even though calculating the mean and standard deviation is a little more elaborate than using just a built-in function call, the actual normalization code is more straightforward, so we&rsquo;re not really loosing any productivity by using F#, considering that we have the same kind of development interactivity thanks to F# Interactive. Other nice touches in F# are the ability to use greek letters and the possibility of separating the data from the algorithm parameters by means of the pipelining operator (|&gt;). By leaving all the data parameters at the end and aggregating them into a tuple, we can turn this code:</p>


<p>{% codeblock lang:fsharp %}
LinearRegression.plotGradientDescentIterations α num_iters XNorm y
{% endcodeblock %}</p>

<p>
    into this:</p>


<p>{% codeblock lang:fsharp %}
(XNorm, y) |> LinearRegression.plotGradientDescentIterations α num_iters
{% endcodeblock %}</p>

<p>
    which I think is clearer.</p>


<p>
    I also like the fact that Math.NET Numerics has a separate type for vectors instead of using one-column or one-row matrices for that, allowing us not to worry about transposing the vectors when multiplying.</p>


<p>
    Mimicking Matlab charting capabilities was a bit more tricky. For the majority of charting I&rsquo;m using <a href="http://code.msdn.microsoft.com/FSharpChart-b59073f5">FSharpChart</a>, but the Microsoft Chart Controls that it wraps don&rsquo;t support contour nor surface plots. For contour plots I ended up using <a href="http://dynamicdatadisplay.codeplex.com/">WPF Dynamic Data Display</a>, and for surface plots I adapted a <a href="http://www.codeproject.com/KB/WPF/WPFChart3D.aspx">sample from CodeProject</a>. I&rsquo;m not really happy with the surface plot, as it&rsquo;s really very basic, so I&rsquo;ll definitely try to improve it in the future. Here&rsquo;s a sample of charts from Matlab:</p>


<p>
    <a href="http://blog.codebeside.org/images/image.png"><img alt="image" border="0" height="217" src="http://blog.codebeside.org/images/image_thumb.png" style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_1.png"><img alt="image" border="0" height="217" src="http://blog.codebeside.org/images/image_thumb_1.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_2.png"><img alt="image" border="0" height="217" src="http://blog.codebeside.org/images/image_thumb_2.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_3.png"><img alt="image" border="0" height="217" src="http://blog.codebeside.org/images/image_thumb_3.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a></p>


<p>
    And here are the equivalent ones I was able to produce in F#:</p>


<p>
    <a href="http://blog.codebeside.org/images/image_4.png"><img alt="image" border="0" height="244" src="http://blog.codebeside.org/images/image_thumb_4.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_5.png"><img alt="image" border="0" height="244" src="http://blog.codebeside.org/images/image_thumb_5.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_6.png"><img alt="image" border="0" height="244" src="http://blog.codebeside.org/images/image_thumb_6.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_7.png"><img alt="image" border="0" height="244" src="http://blog.codebeside.org/images/image_thumb_7.png" style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a></p>


<p>
    I&rsquo;m putting this available at <a href="https://github.com/ovatsus/MLClass">https://github.com/ovatsus/MLClass</a>. I&rsquo;m only going to push the commits weekly after the class exercise deadlines expire, so at the time of this post only the implementation of the Linear Regression exercises is available.</p>


<p>
    So far this has been a very rewarding experience, as besides preparing the way so I can reuse this code in the future, I&#39;ve been submitting patches both to Math.NET Numerics and to FSharpChart.</p>


<p>
    <strong>Edit:</strong></p>


<p>
    As some people have pointed out in the comments, the Octave version of feature normalization could also be done without iteration:</p>


<p>{% codeblock lang:matlab %}
function [X_norm, mu, sigma] = featureNormalize(X)</p>

<p>mu = mean(X);
sigma = std(X);
m = size(X, 1);
X_norm = (X - repmat(mu, m, 1)) / diag(sigma);</p>

<p>end
{% endcodeblock %}</p>

<p>
    In this case the corresponding F# code would be:</p>


<p>{% codeblock lang:fsharp %}
let featureNormalize (X: Matrix<float>) =</p>

<pre><code>let μ = 
    X.ColumnEnumerator() 
    |&gt; Seq.map (fun (j, col) -&gt; col.Mean()) 
    |&gt; DenseVector.ofSeq

let σ = 
    X.ColumnEnumerator() 
    |&gt; Seq.map (fun (j, col) -&gt; col.StandardDeviation()) 
    |&gt; DenseVector.ofSeq    

let μExpanded = DenseMatrix.initRow X.RowCount X.ColumnCount (fun _ -&gt; μ)
let σDiag = DenseMatrix.diag σ

let X = (X - μExpanded) * σDiag.Inverse()

(X, μ, σ)
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extension Properties]]></title>
    <link href="http://blog.codebeside.org/blog/2008/09/10/extension-properties"/>
    <updated>2008-09-10T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2008/09/10/extension-properties</id>
    <content type="html"><![CDATA[<p>
    After you start to use extension methods and see all their benefits, you start thinking about how nice it would be to also have extension properties. When Scott Guthrie first announced them in <a href="http://weblogs.asp.net/scottgu/archive/2007/03/13/new-orcas-language-feature-extension-methods.aspx" title="">New &quot;Orcas&quot; Language Feature: Extension Methods</a>, someone immediately asked about extension properties. It just seems the feature is incomplete without both.</p>


<p>
    One particular area that would benefit greatly from extension properties would be WPF. Every time you define an attached property, you usually create a static getter and a static setter for it. If you could package that up in an extension property, attached properties would be much nicer to use.</p>


<p>
    There have been some hints that the C# language team is considering extension properties for the future, so maybe we&#39;ll get them in C# 4.0. But if you don&#39;t want to wait until 2010, you can have extension properties right now if you use F#. Check out Matthew Podwysocki&#39;s <a href="http://weblogs.asp.net/podwysocki/archive/2008/09/09/object-oriented-f-extension-everything.aspx">Object Oriented F# - Extension Everything</a>.</p>

]]></content>
  </entry>
  
</feed>
