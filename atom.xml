<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Beside]]></title>
  <link href="http://blog.codebeside.org/atom.xml" rel="self"/>
  <link href="http://blog.codebeside.org/"/>
  <updated>2014-03-22T18:19:29+00:00</updated>
  <id>http://blog.codebeside.org/</id>
  <author>
    <name><![CDATA[Gustavo Guerra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maintaining backwards compatibility when changing APIs in F#]]></title>
    <link href="http://blog.codebeside.org/blog/2014/03/22/maintaining-backwards-compatibility-when-changing-apis-in-fsharp"/>
    <updated>2014-03-22T18:19:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2014/03/22/maintaining-backwards-compatibility-when-changing-apis-in-fsharp</id>
    <content type="html"><![CDATA[<h3>Classes</h3>

<p>By now, mostly everyone already knows how to change the internal representation of a class without breaking compatibility. In C#:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Rectangle</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Point</span> <span class="n">TopLeft</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Point</span> <span class="n">BottomRight</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Rectangle</span><span class="p">(</span><span class="n">Point</span> <span class="n">topLeft</span><span class="p">,</span> <span class="n">Point</span> <span class="n">bottomRight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TopLeft</span> <span class="p">=</span> <span class="n">topLeft</span><span class="p">;</span>
</span><span class='line'>        <span class="n">BottomRight</span> <span class="p">=</span> <span class="n">bottomRight</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// After</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Rectangle</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Point</span> <span class="n">TopLeft</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Point</span> <span class="n">Size</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Rectangle</span><span class="p">(</span><span class="n">Point</span> <span class="n">topLeft</span><span class="p">,</span> <span class="n">Size</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TopLeft</span> <span class="p">=</span> <span class="n">topLeft</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Size</span> <span class="p">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// for backwards compatibility:</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Rectangle</span><span class="p">(</span><span class="n">Point</span> <span class="n">topLeft</span><span class="p">,</span> <span class="n">Point</span> <span class="n">bottomRight</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">TopLeft</span> <span class="p">=</span> <span class="n">topLeft</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">bottomRight</span><span class="p">.</span><span class="n">X</span> <span class="p">-</span> <span class="n">topLeft</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="n">bottomRight</span><span class="p">.</span><span class="n">Y</span> <span class="p">-</span> <span class="n">topLeft</span><span class="p">.</span><span class="n">Y</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// for backwards compatibility:</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Point</span> <span class="n">BottomRight</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">TopLeft</span><span class="p">.</span><span class="n">X</span> <span class="p">+</span> <span class="n">Size</span><span class="p">.</span><span class="n">Width</span><span class="p">,</span> <span class="n">TopLeft</span><span class="p">.</span><span class="n">Y</span> <span class="p">+</span> <span class="n">Size</span><span class="p">.</span><span class="n">Height</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in F#:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">TopLeft</span> <span class="o">=</span> <span class="n">topLeft</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">BottomRight</span> <span class="o">=</span> <span class="n">bottomRight</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// After</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span><span class="o">,</span> <span class="n">size</span><span class="o">:</span><span class="nc">Size</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">TopLeft</span> <span class="o">=</span> <span class="n">topLeft</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">Size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// for backwards compatibility:</span>
</span><span class='line'>    <span class="k">new</span> <span class="o">(</span><span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="nc">Point</span><span class="o">(</span><span class="n">bottomRight</span><span class="o">.</span><span class="nc">X</span> <span class="o">-</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">X</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">.</span><span class="nc">Y</span> <span class="o">-</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">Y</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// for backwards compatibility:</span>
</span><span class='line'>    <span class="k">member</span> <span class="o">__.</span><span class="nc">BottomRight</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">Point</span><span class="o">(</span><span class="n">topLeft</span><span class="o">.</span><span class="nc">X</span> <span class="o">+</span> <span class="n">size</span><span class="o">.</span><span class="nc">Width</span><span class="o">,</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">Y</span> <span class="o">+</span> <span class="n">size</span><span class="o">.</span><span class="nc">Height</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Records</h3>

<p>When using record types, things are a little bit more tricky, though:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">TopLeft</span> <span class="o">:</span> <span class="nc">Point</span>
</span><span class='line'>      <span class="nc">BottomRight</span> <span class="o">:</span> <span class="nc">Point</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// After</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">TopLeft</span> <span class="o">:</span> <span class="nc">Point</span>
</span><span class='line'>      <span class="nc">Size</span> <span class="o">:</span> <span class="nc">Size</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">BottomRight</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="nn">TopLeft</span><span class="p">.</span><span class="nc">X</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="nn">Size</span><span class="p">.</span><span class="nc">Width</span><span class="o">,</span> <span class="n">x</span><span class="o">.</span><span class="nn">TopLeft</span><span class="p">.</span><span class="nc">Y</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="nn">Size</span><span class="p">.</span><span class="nc">Height</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This change will keep working at the usages of Rectangle, but not at creation, as there isn&#8217;t a way (at least that I know of) to make something like <code>{ TopLeft = Point(2.5, 3.0); BottomRight = Point(4.0, 7.5) }</code> keep working. This can be avoided if we originally had hidden the fact that Rectangle was representation as a record, like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">private</span> <span class="o">{</span> <span class="nc">TL</span> <span class="o">:</span> <span class="nc">Point</span>
</span><span class='line'>              <span class="nc">BR</span> <span class="o">:</span> <span class="nc">Point</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TopLeft</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">TL</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">BottomRight</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">BR</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">Create</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">TL</span> <span class="o">=</span> <span class="n">topLeft</span><span class="o">;</span> <span class="nc">BR</span> <span class="o">=</span> <span class="n">bottomRight</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But for me this seems to defeat some of the advantages of using a record in the first place. You still get structural equality and pretty printing for free, which classes don&#8217;t have, but you lose the nice pattern matching and type inference capabilities that usually come with records.</p>

<h3>Single case discriminated unions</h3>

<p>The situation for discriminated unions is better, though. For each changed case, you can use one active pattern and a function to maintain backward compatibility:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Rectange</span> <span class="k">of</span> <span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span> <span class="o">*</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// After</span>
</span><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Rectangle2</span> <span class="k">of</span> <span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span> <span class="o">*</span> <span class="n">size</span><span class="o">:</span><span class="nc">Size</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for backwards compatibility:</span>
</span><span class='line'><span class="k">let</span> <span class="o">(|</span><span class="nc">Rectangle</span><span class="o">|)</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Rectangle2</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="n">size</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="nc">Point</span><span class="o">(</span><span class="n">topLeft</span><span class="o">.</span><span class="nc">X</span> <span class="o">+</span> <span class="n">size</span><span class="o">.</span><span class="nc">Width</span><span class="o">,</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">Y</span> <span class="o">+</span> <span class="n">size</span><span class="o">.</span><span class="nc">Height</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for backwards compatibility:</span>
</span><span class='line'><span class="k">let</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Rectangle2</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="nc">Size</span><span class="o">(</span><span class="n">bottomRight</span><span class="o">.</span><span class="nc">X</span> <span class="o">-</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">X</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">.</span><span class="nc">Y</span> <span class="o">-</span> <span class="n">topLeft</span><span class="o">.</span><span class="nc">Y</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The downside is that the new discriminated union case has to have a new name, otherwise the function for backward compatibility will shadow the case constructor. This might not necessarily be a bad thing, though.</p>

<p>We could also make the discriminated union representation private, like we did for the record:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Rectangle</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">private</span> <span class="o">|</span> <span class="nc">Rectangle</span> <span class="k">of</span> <span class="n">topLeft</span><span class="o">:</span><span class="nc">Point</span> <span class="o">*</span> <span class="n">bottomRight</span><span class="o">:</span><span class="nc">Point</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">TopLeft</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="o">_)</span> <span class="o">-&gt;</span> <span class="n">topLeft</span>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">BottomRight</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Rectangle</span><span class="o">(_,</span> <span class="n">bottomRight</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">bottomRight</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="nc">Create</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">Rectangle</span><span class="o">(</span><span class="n">topLeft</span><span class="o">,</span> <span class="n">bottomRight</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we&#8217;re deciding between using a record or a single case discriminated union, these considerations might help decide.</p>

<h3>Multiple case discriminated unions</h3>

<p>When we have discriminated unions with multiple cases, the same technique also applies, but now we need to use partial active patterns instead (<code>(|Pattern|_|)</code> returning an option instead of <code>(|Pattern|)</code> returning the type directly). Here&#8217;s an example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="c1">// Before</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">JsonValue</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">String</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Number</span> <span class="k">of</span> <span class="kt">decimal</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Float</span> <span class="k">of</span> <span class="kt">float</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Object</span> <span class="k">of</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">,</span> <span class="nc">JsonValue</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Array</span> <span class="k">of</span> <span class="nc">JsonValue</span><span class="bp">[]</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Boolean</span> <span class="k">of</span> <span class="kt">bool</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Null</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// After</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">RequireQualifiedAccess</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">JsonValue</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">String</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Number</span> <span class="k">of</span> <span class="kt">decimal</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Float</span> <span class="k">of</span> <span class="kt">float</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Record</span> <span class="k">of</span> <span class="n">properties</span><span class="o">:(</span><span class="kt">string</span><span class="o">*</span><span class="nc">JsonValue</span><span class="o">)</span><span class="bp">[]</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Array</span> <span class="k">of</span> <span class="n">elements</span><span class="o">:</span><span class="nc">JsonValue</span><span class="bp">[]</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Boolean</span> <span class="k">of</span> <span class="kt">bool</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Null</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">CompilationRepresentation</span><span class="o">(</span><span class="nn">CompilationRepresentationFlags</span><span class="p">.</span><span class="nc">ModuleSuffix</span><span class="o">)&gt;]</span>
</span><span class='line'><span class="k">module</span> <span class="nc">JsonValue</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[&lt;</span><span class="nc">Obsolete</span><span class="o">(</span><span class="s2">&quot;Please use JsonValue.Record instead&quot;</span><span class="o">)&gt;]</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">(|</span><span class="nc">Object</span><span class="o">|_|)</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nn">JsonValue</span><span class="p">.</span><span class="nc">Record</span> <span class="n">properties</span> <span class="o">-&gt;</span> <span class="nn">Map</span><span class="p">.</span><span class="n">ofArray</span> <span class="n">properties</span> <span class="o">|&gt;</span> <span class="nc">Some</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[&lt;</span><span class="nc">Obsolete</span><span class="o">(</span><span class="s2">&quot;Please use JsonValue.Record instead&quot;</span><span class="o">)&gt;]</span>
</span><span class='line'>    <span class="k">let</span> <span class="nc">Object</span> <span class="o">=</span> <span class="nn">Map</span><span class="p">.</span><span class="n">toArray</span> <span class="o">&gt;&gt;</span> <span class="nn">JsonValue</span><span class="p">.</span><span class="nc">Record</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, because <code>[&lt;RequireQualifiedAccess&gt;]</code> was being used, we have to include the active pattern and the compatibility function in a module, and use <code>[&lt;CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)&gt;]</code> to be able to maintain the exact same syntax. We also marked the backward compatibility constructs with the <code>Obsolete</code> attribute because we don&#8217;t want new users to be using the old discriminated union case. This attribute will make sure the old case doesn&#8217;t show up in IntelliSense, and will also issue a warning to old users.</p>

<p>There&#8217;s one extra caveat, though. Consider the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">f</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">String</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Number</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Float</span> <span class="n">f</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Object</span> <span class="n">properties</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Array</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Boolean</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Null</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even though we&#8217;re handling all the cases, we get a warning stating <strong>this pattern-matching is not exhaustive</strong>. This is because the compiler doesn&#8217;t know what <code>Object</code> will match on: it&#8217;s a custom defined partial active pattern, so the implementation could match on multiple cases or even none at all.</p>

<h3>Final thoughts</h3>

<p>In all of the above we were only concerned with source compatibility. Binary compatibility has other concerns that would require further exploration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# named union fields]]></title>
    <link href="http://blog.codebeside.org/blog/2014/03/21/fsharp-named-union-fields"/>
    <updated>2014-03-21T22:37:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2014/03/21/fsharp-named-union-fields</id>
    <content type="html"><![CDATA[<p>One of the new features in F# 3.1, and one that I really like, is the possibility to name fields of discriminated unions. From the <a href="http://blogs.msdn.com/b/fsharpteam/archive/2013/06/27/announcing-a-pre-release-of-f-3-1-and-the-visual-f-tools-in-visual-studio-2013.aspx">F# 3.1 announcement blog post</a>:</p>

<blockquote><p>Discriminated union types are a powerful feature of F# which make programming with shaped data simple, accurate and robust. They also greatly reduce the number of classes needed to represent data in many common circumstances.</p>

<p>In F# 3.1, it is now possible to name union fields within each case of a union type. This is important for large-scale software engineering, particularly when union cases have a large number of fields or multiple fields with the same type.</p>

<p><img src="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-39-71-metablogapi/2021.31blog_5F00_1_5F00_0EEA8EAA.png" alt="" /></p></blockquote>

<p>What wasn&#8217;t originally mentioned on that post, I just found out today, is that pattern match by name is not limited to a single element of the case: we can match on multiple elements by separating them by <code>;</code>.</p>

<p>When we pattern match by position, the several elements are separated by <code>,</code>, and as that didn&#8217;t work with union field names, I assumed it wasn&#8217;t possible to do at all. But it turns out it is possible if you use <code>;</code> instead. Here&#8217;s an example taken from F# Data:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">InferedType</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Primitive</span> <span class="k">of</span> <span class="n">typ</span><span class="o">:</span><span class="nn">System</span><span class="p">.</span><span class="nc">Type</span> <span class="o">*</span> <span class="kt">unit</span><span class="o">:</span><span class="n">option</span><span class="o">&lt;</span><span class="nn">System</span><span class="p">.</span><span class="nc">Type</span><span class="o">&gt;</span> <span class="o">*</span> <span class="n">optional</span><span class="o">:</span><span class="kt">bool</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// positional pattern match:</span>
</span><span class='line'><span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Primitive</span><span class="o">(</span><span class="n">typ</span><span class="o">,</span> <span class="o">_,</span> <span class="bp">false</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// pattern match by name </span>
</span><span class='line'><span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="nc">Primitive</span><span class="o">(</span><span class="n">typ</span> <span class="o">=</span> <span class="n">typ</span><span class="o">;</span> <span class="n">optional</span> <span class="o">=</span> <span class="bp">false</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">...</span>
</span><span class='line'><span class="o">|</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FSharp.Data 2.0.0 released]]></title>
    <link href="http://blog.codebeside.org/blog/2014/03/10/fsharp-data-2-0-0-released"/>
    <updated>2014-03-10T02:00:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2014/03/10/fsharp-data-2-0-0-released</id>
    <content type="html"><![CDATA[<p>Version <a href="http://www.nuget.org/packages/FSharp.Data/2.0.0">2.0.0</a> of <a href="http://fsharp.github.io/FSharp.Data/">FSharp.Data</a> was just released. You can get the full version history on the <a href="https://github.com/fsharp/FSharp.Data/blob/master/RELEASE_NOTES.md">release notes</a>, but here are the highlights:</p>

<ul>
<li>A new type inference algorithm that will generate better and more robust API&#8217;s in the presence of missing and heterogeneous types. This means that you&#8217;ll get much less errors when using JsonProvider and XmlProvider on real world messy files. The error messages are now also more descriptive when things go wrong.</li>
<li>Much improved Freebase support for individuals.</li>
<li>The functionality of the Http class was greatly extended. It now supports uploading and downloading binary files, and compression across all supported platforms, among many other tweaks.</li>
<li>Improved the overall performance of the type provider itself when running inside the editor, and also of the generated code.</li>
<li>The documentation was much improved, there&#8217;s now a Japanese translation of it, and comprehensive reference documentation.</li>
<li>Mono is now fully supported, as well as F# 3.1, and the new Portable Class Library profile 7.</li>
<li>Source link support. This means that you can step trough the source code while debugging if you enable that feature in Visual Studio.</li>
</ul>


<p>We also took the opportunity of major version bump to do some house cleaning, so things that we weren&#8217;t previously very happy with were renamed, dropped or, shuffled around. Unfortunately this means breaking changes, but we think the overall outcome is positive. In this process we dropped support for:</p>

<ul>
<li>Silverlight and Windows Phone separate packages.</li>
<li>Apiary provider (which has now moved to a <a href="https://github.com/fsprojects/ApiaryProvider">separate project</a>).</li>
</ul>


<p>Thanks to everyone which contributed directly to this release, <a href="http://github.com/tpetricek">Tomas Petricek</a>, <a href="http://github.com/dsyme">Don Syme</a>, <a href="http://github.com/forki">Steffen Forkmann</a>, <a href="http://github.com/enricosada">Enrico Sada</a>, <a href="http://github.com/ctaggart">Cameron Taggart</a>, <a href="http://github.com/remkoboschker">Remko Boschker</a>, <a href="http://github.com/vasily-kirichenko">Vasily Kirichenko</a>, <a href="http://github.com/diegofrata">Diego Frata</a>, <a href="http://github.com/yukitos">yukitos</a>, <a href="http://github.com/OkayX6">Denis Ok</a>, and <a href="http://github.com/jamesholwell">James Holwell</a>, and also to everyone who also contributed indirectly through yak-shaving needed in <a href="http://tpetricek.github.io/FSharp.Formatting">FSharp.Formatting</a>, <a href="http://fsharp.github.io/FSharp.Compiler.Service">FSharp.Compiler.Services</a>, and <a href="http://fsharp.github.io/FAKE">FAKE</a>, including <a href="http://github.com/7sharp9">Dave Thomas</a>, <a href="http://github.com/soloman817">Xiang Zhang</a>, <a href="http://github.com/dungpa">Anh-Dung Phan</a>, <a href="http://github.com/fbmnds">fbmnds</a>, and <a href="http://github.com/mexx">Max Malook</a>. And also thanks to everyone who contributed by just placing issues on github, but I couldn&#8217;t find a way to generate a list of all of you.</p>

<p>There&#8217;s still a lot of room for improvement, and we love pull requests, so please contribute, even if it&#8217;s only fixing a typo in the docs. A getting started guide is available <a href="http://fsharp.github.io/FSharp.Data/contributing.html">here</a>.</p>

<p>For the next versions, we want to add:</p>

<ul>
<li>Html type provider, currently being worked on by <a href="http://github.com/colinbull">Colin Bull</a>, <a href="http://github.com/mathias-brandewinder">Mathias Brandewinder</a> and me.</li>
<li>Write API for Json, currently being worked on by <a href="http://github.com/pezipink">Ross McKinlay</a>.</li>
<li>Authentication support, currently being worked on by <a href="http://github.com/veikkoeeva">Veikko Eeva</a>.</li>
<li>XSD support, which I hope one of you reading this will pick up :).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Higher order list operations across languages]]></title>
    <link href="http://blog.codebeside.org/blog/2013/11/10/higher-order-list-operations-across-languages"/>
    <updated>2013-11-10T21:55:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2013/11/10/higher-order-list-operations-across-languages</id>
    <content type="html"><![CDATA[<p>Did this table out of curiosity, decided to share it:</p>

<pre>
----------------------------------------------------------------------------------------------
| F#         | C#         | Scala       | Clojure | Python | Ruby     | Haskell   | SQL      |
|------------|------------|-------------|---------|--------|----------|-----------|----------|
| map        | Select     | map         | map     | map    | collect  | map       | Select   |
| filter     | Where      | filter      | filter  | filter | select   | filter    | Where    |
| fold       | Aggregate  | foldLeft    | reduce  | reduce | inject   | foldl     |          |
| foldBack   |            | foldRight   |         |        |          | foldr     |          |
| reduce     | Aggregate  | reduceLeft  | reduce  | reduce | inject   | foldl1    |          |
| reduceBack |            | reduceRight |         |        |          | foldr1    |          |
| collect    | SelectMany | flatMap     | mapcat  |        | flat_map | concatMap | From     |
| exists     | Any        | exists      | some    | any    | any?     | any       | Exists   |
| forall     | All        | forall      | every?  | all    | all?     | all       |          |
| sortBy     | OrderBy    | sortBy      | sort-by | sorted | sort_by  | sortBy    | Order By |
----------------------------------------------------------------------------------------------
</pre>


<p>PS: please correct me if I got something wrong</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# for Screen Scraping]]></title>
    <link href="http://blog.codebeside.org/blog/2013/10/14/fsharp-for-screen-scraping"/>
    <updated>2013-10-14T23:58:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2013/10/14/fsharp-for-screen-scraping</id>
    <content type="html"><![CDATA[<p>One of the many things F# is great for is screen scraping. Here&#8217;s why:</p>

<ul>
<li>Downloading multiple pages asynchronously and in parallel is trivial with F#&#8217;s async support</li>
<li>Navigating the HTML DOM is a great fit for higher order data processing combined with partial application</li>
<li>F# Interactive really shines in iterative processes like this, where you try something out, see it didn&#8217;t work quite well, and keep adjusting until you get it right. Doing a full compile-run cycle on each iteration instead of simply evaluating in the REPL would make this task take much more time-consuming</li>
</ul>


<p><a href="http://htmlagilitypack.codeplex.com/">Html Agility Pack</a> is the obvious candidate to use for screen scraping in .NET, but like other LINQ-like libraries that rely heavily on extension methods, its API isn&#8217;t ideal for use in F#. A simple wrapper will take care of that problem:</p>

<!-- More -->




<figure class='code'><figcaption><span>An F# wrapper for HtmlAgilityPack - HtmlAgilityPack.FSharp.fs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">HtmlAgilityPack</span><span class="p">.</span><span class="nc">FSharp</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">HtmlAgilityPack</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">HtmlNode</span> <span class="k">with</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">FollowingSibling</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sibling</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">NextSibling</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">sibling</span> <span class="o">=</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">null</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">sibling</span><span class="o">.</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">name</span> <span class="k">then</span>
</span><span class='line'>            <span class="n">sibling</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">sibling</span><span class="o">.</span><span class="nc">FollowingSibling</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">FollowingSiblings</span> <span class="n">name</span> <span class="o">=</span> <span class="n">seq</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sibling</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">NextSibling</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">sibling</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">sibling</span><span class="o">.</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">name</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">sibling</span>
</span><span class='line'>            <span class="k">yield</span><span class="o">!</span> <span class="n">sibling</span><span class="o">.</span><span class="nc">FollowingSiblings</span> <span class="n">name</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">PrecedingSibling</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sibling</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">PreviousSibling</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">sibling</span> <span class="o">=</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">null</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">sibling</span><span class="o">.</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">name</span> <span class="k">then</span>
</span><span class='line'>            <span class="n">sibling</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">sibling</span><span class="o">.</span><span class="nc">PrecedingSibling</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">member</span> <span class="n">x</span><span class="o">.</span><span class="nc">PrecedingSiblings</span> <span class="n">name</span> <span class="o">=</span> <span class="n">seq</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sibling</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="nc">PreviousSibling</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">sibling</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">sibling</span><span class="o">.</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">name</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">sibling</span>
</span><span class='line'>            <span class="k">yield</span><span class="o">!</span> <span class="n">sibling</span><span class="o">.</span><span class="nc">PrecedingSiblings</span> <span class="n">name</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">parent</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">ParentNode</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">element</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">Element</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">elements</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">Elements</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">descendants</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">Descendants</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">descendantsAndSelf</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">DescendantsAndSelf</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">ancestors</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">Ancestors</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">ancestorsAndSelf</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">AncestorsAndSelf</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">followingSibling</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">FollowingSibling</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">followingSiblings</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">FollowingSiblings</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">precedingSibling</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">PrecedingSibling</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">precedingSiblings</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">PrecedingSiblings</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">inline</span> <span class="n">innerText</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">InnerText</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">inline</span> <span class="n">attr</span> <span class="n">name</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">GetAttributeValue</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">inline</span> <span class="o">(?)</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="n">name</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">attr</span> <span class="n">name</span> <span class="n">node</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">inline</span> <span class="n">hasAttr</span> <span class="n">name</span> <span class="n">value</span> <span class="n">node</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">attr</span> <span class="n">name</span> <span class="n">node</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">inline</span> <span class="n">hasId</span> <span class="n">value</span> <span class="n">node</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">hasAttr</span> <span class="s2">&quot;id&quot;</span> <span class="n">value</span> <span class="n">node</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">inline</span> <span class="n">hasClass</span> <span class="n">value</span> <span class="n">node</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">hasAttr</span> <span class="s2">&quot;class&quot;</span> <span class="n">value</span> <span class="n">node</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">inline</span> <span class="n">hasText</span> <span class="n">value</span> <span class="o">(</span><span class="n">node</span> <span class="o">:</span> <span class="nc">HtmlNode</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">node</span><span class="o">.</span><span class="nc">InnerText</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">createDoc</span> <span class="n">html</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HtmlDocument</span><span class="bp">()</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">.</span><span class="nc">LoadHtml</span> <span class="n">html</span>
</span><span class='line'>    <span class="n">doc</span><span class="o">.</span><span class="nc">DocumentNode</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we leave the &#8220;target&#8221; of an operation as the last parameter of a function, we can leverage partial application to remove the need to create anonymous lambdas when using higher order functions such as the ones needed for DOM traversing.</p>

<p>In this case, by taking the <code>this</code> parameter of the C# methods and putting it as the last parameter of our wrapper functions <code>elements</code>, <code>descendants</code>, <code>innerText</code>, etc., our code is now much easier to read and to understand than if we used the Html Agility Pack methods directly.</p>

<p>As an example, here is a small script that I used when developing one of my Windows Phone apps to get the list if all the rail stations in Ireland together with their coordinates:</p>

<figure class='code'><figcaption><span>IrelandRailStations.fsx </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="s2">&quot;System.Net&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="s2">&quot;../lib/portable/FSharp.Data.dll&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">r</span> <span class="s2">&quot;../packages/HtmlAgilityPack-PCL.1.4.6/lib/HtmlAgilityPack-PCL.dll&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;HtmlAgilityPack.FSharp.fs&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get a page that lists the stations that start with firstLetter</span>
</span><span class='line'><span class="k">let</span> <span class="n">getStationListPage</span> <span class="n">firstLetter</span> <span class="o">=</span>
</span><span class='line'>    <span class="s2">&quot;http://www.irishrail.ie/cat_stations_list.jsp?letter=&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="kt">string</span> <span class="n">firstLetter</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Http</span><span class="p">.</span><span class="nc">AsyncRequestString</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get all the links to stations inside the &lt;ul class=&quot;results&quot;&gt;</span>
</span><span class='line'><span class="k">let</span> <span class="n">getStations</span> <span class="n">stationListPage</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">stationListPage</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">createDoc</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">descendants</span> <span class="s2">&quot;ul&quot;</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="n">hasClass</span> <span class="s2">&quot;results&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">head</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">descendants</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">attr</span> <span class="s2">&quot;href&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toArray</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get the page for a station</span>
</span><span class='line'><span class="k">let</span> <span class="n">getStationPage</span> <span class="n">station</span> <span class="o">=</span>
</span><span class='line'>    <span class="s2">&quot;http://www.irishrail.ie/&quot;</span> <span class="o">+</span> <span class="n">station</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Http</span><span class="p">.</span><span class="nc">AsyncRequestString</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get the latitude and longitude of a station from the google maps link in the station page</span>
</span><span class='line'><span class="k">let</span> <span class="n">getCoordinates</span> <span class="n">stationPage</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">googleMapsLink</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">stationPage</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="n">createDoc</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="n">descendants</span> <span class="s2">&quot;div&quot;</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="n">hasId</span> <span class="s2">&quot;map-ordnance&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">head</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="n">followingSibling</span> <span class="s2">&quot;ul&quot;</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="n">descendants</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">head</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="n">attr</span> <span class="s2">&quot;href&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">split</span> <span class="o">(</span><span class="n">c</span><span class="o">:</span><span class="kt">char</span><span class="o">)</span> <span class="o">(</span><span class="n">s</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="nc">Split</span> <span class="n">c</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">[|</span> <span class="s2">&quot;ll&quot;</span> <span class="o">;</span> <span class="n">coords</span> <span class="o">|]</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">Uri</span><span class="o">(</span><span class="n">googleMapsLink</span><span class="o">).</span><span class="nc">Query</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="n">split</span> <span class="sc">&#39;&amp;&#39;</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">split</span> <span class="sc">&#39;=&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="nn">Seq</span><span class="p">.</span><span class="n">head</span> <span class="o">&gt;&gt;</span> <span class="o">(=)</span> <span class="s2">&quot;ll&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">head</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">[|</span> <span class="n">lat</span><span class="o">;</span> <span class="n">long</span> <span class="o">|]</span> <span class="o">=</span> <span class="n">coords</span> <span class="o">|&gt;</span> <span class="n">split</span> <span class="sc">&#39;,&#39;</span> <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="kt">float</span>
</span><span class='line'>    <span class="n">lat</span><span class="o">,</span> <span class="n">long</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">stationsAndCoords</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">stations</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">[</span><span class="sc">&#39;A&#39;</span><span class="o">..</span><span class="sc">&#39;Z&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="n">getStationListPage</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">collect</span> <span class="n">getStations</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">lat</span><span class="o">,</span> <span class="n">long</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">stations</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="n">getStationPage</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Parallel</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">RunSynchronously</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="n">getCoordinates</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">unzip</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">stations</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">stations</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="nn">Uri</span><span class="p">.</span><span class="nc">UnescapeDataString</span>
</span><span class='line'>    <span class="nn">Array</span><span class="p">.</span><span class="n">zip3</span> <span class="n">stations</span> <span class="n">lat</span> <span class="n">long</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">val</span> <span class="n">stationsAndCoords</span> <span class="o">:</span> <span class="o">(</span><span class="kt">string</span> <span class="o">*</span> <span class="kt">float</span> <span class="o">*</span> <span class="kt">float</span><span class="o">)</span> <span class="bp">[]</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">[|(</span><span class="s2">&quot;Adamstown&quot;</span><span class="o">,</span> <span class="mi">53</span><span class="o">.</span><span class="mi">335285</span><span class="o">,</span> <span class="o">-</span><span class="mi">6</span><span class="o">.</span><span class="mi">4523325</span><span class="o">);</span> <span class="o">(</span><span class="s2">&quot;Ardrahan&quot;</span><span class="o">,</span> <span class="mi">53</span><span class="o">.</span><span class="mi">157177</span><span class="o">,</span> <span class="o">-</span><span class="mi">8</span><span class="o">.</span><span class="mi">814831</span><span class="o">);</span>
</span><span class='line'>    <span class="o">(</span><span class="s2">&quot;Arklow&quot;</span><span class="o">,</span> <span class="mi">52</span><span class="o">.</span><span class="mi">793163</span><span class="o">,</span> <span class="o">-</span><span class="mi">6</span><span class="o">.</span><span class="mi">159939</span><span class="o">);</span> <span class="o">(</span><span class="s2">&quot;Ashtown&quot;</span><span class="o">,</span> <span class="mi">53</span><span class="o">.</span><span class="mi">37552</span><span class="o">,</span> <span class="o">-</span><span class="mi">6</span><span class="o">.</span><span class="mi">3313503</span><span class="o">);</span>
</span><span class='line'>    <span class="o">(</span><span class="s2">&quot;Athenry&quot;</span><span class="o">,</span> <span class="mi">53</span><span class="o">.</span><span class="mi">30153</span><span class="o">,</span> <span class="o">-</span><span class="mi">8</span><span class="o">.</span><span class="mi">748547</span><span class="o">);</span> <span class="o">(</span><span class="s2">&quot;Athlone&quot;</span><span class="o">,</span> <span class="mi">53</span><span class="o">.</span><span class="mi">427322</span><span class="o">,</span> <span class="o">-</span><span class="mi">7</span><span class="o">.</span><span class="mi">9368286</span><span class="o">);</span>
</span><span class='line'>    <span class="o">(</span><span class="s2">&quot;Athy&quot;</span><span class="o">,</span> <span class="mi">52</span><span class="o">.</span><span class="mi">991997</span><span class="o">,</span> <span class="o">-</span><span class="mi">6</span><span class="o">.</span><span class="mi">976196</span><span class="o">);</span> <span class="o">(</span><span class="s2">&quot;Attymon&quot;</span><span class="o">,</span> <span class="mi">53</span><span class="o">.</span><span class="mi">321205</span><span class="o">,</span> <span class="o">-</span><span class="mi">8</span><span class="o">.</span><span class="mi">606078</span><span class="o">);</span>
</span><span class='line'>  <span class="o">...|]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also see that the same pattern was used for making the <code>String.Split</code> function play well with partial application.</p>

<p>Another neat feature of F# for scripting (I wouldn&#8217;t recommend incorporating it in production code), is the ability to de-structure arrays in one liners, as done in <code>let [| "ll" ; coords |] =</code> and <code>let [| lat; long |] =</code>. The compiler will emit a warning saying that the match is not exhaustive, telling us that this might backfire if there are less than two elements in the array, but for the purpose of a one shot script to download some data it&#8217;s fine.</p>

<p>And to give a second example, here&#8217;s a snippet from my Learn On The Go app that processes the html of the lecture videos page of a Coursera course:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">lectureSections</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">trimAndUnescape</span> <span class="o">(</span><span class="n">text</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="s2">&quot;&amp;nbsp;&quot;</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">).</span><span class="nc">Trim</span><span class="bp">()</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="s2">&quot;&amp;amp;&quot;</span><span class="o">,</span> <span class="s2">&quot;&amp;&quot;</span><span class="o">).</span><span class="nc">Replace</span><span class="o">(</span><span class="s2">&quot;&amp;quot;&quot;</span><span class="o">,</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">).</span><span class="nc">Replace</span><span class="o">(</span><span class="s2">&quot;apos;&quot;</span><span class="o">,</span> <span class="s2">&quot;&#39;&quot;</span><span class="o">).</span><span class="nc">Replace</span><span class="o">(</span><span class="s2">&quot;&amp;lt;&quot;</span><span class="o">,</span> <span class="s2">&quot;&lt;&quot;</span><span class="o">).</span><span class="nc">Replace</span><span class="o">(</span><span class="s2">&quot;&amp;gt;&quot;</span><span class="o">,</span> <span class="s2">&quot;&gt;&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">endsWith</span> <span class="n">suffix</span> <span class="o">(</span><span class="n">text</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="nc">EndsWith</span> <span class="n">suffix</span>
</span><span class='line'>    <span class="n">createDoc</span> <span class="n">lecturesHtmlStr</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">descendants</span> <span class="s2">&quot;h3&quot;</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">h3</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">title</span> <span class="o">=</span> <span class="n">h3</span> <span class="o">|&gt;</span> <span class="n">innerText</span> <span class="o">|&gt;</span> <span class="n">trimAndUnescape</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">completed</span> <span class="o">=</span> <span class="n">h3</span> <span class="o">|&gt;</span> <span class="n">parent</span> <span class="o">|&gt;</span> <span class="n">hasClass</span> <span class="s2">&quot;course-item-list-header contracted&quot;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">ul</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">h3</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="n">parent</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="n">followingSibling</span> <span class="s2">&quot;ul&quot;</span>
</span><span class='line'>        <span class="n">ul</span><span class="o">,</span> <span class="n">title</span><span class="o">,</span> <span class="n">completed</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">filter</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">ul</span><span class="o">,</span> <span class="o">_,</span> <span class="o">_)</span> <span class="o">-&gt;</span> <span class="n">ul</span> <span class="o">&lt;&gt;</span> <span class="k">null</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">ul</span><span class="o">,</span> <span class="n">title</span><span class="o">,</span> <span class="n">completed</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">lectures</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">ul</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="n">elements</span> <span class="s2">&quot;li&quot;</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">element</span> <span class="s2">&quot;a&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">a</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">id</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|&gt;</span> <span class="n">attr</span> <span class="s2">&quot;data-lecture-id&quot;</span> <span class="o">|&gt;</span> <span class="kt">int</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">title</span> <span class="o">=</span> <span class="n">innerText</span> <span class="n">a</span> <span class="o">|&gt;</span> <span class="n">trimAndUnescape</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">quizAttemptedSpan</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|&gt;</span> <span class="n">elements</span> <span class="s2">&quot;span&quot;</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryFind</span> <span class="o">(</span><span class="n">hasClass</span> <span class="s2">&quot;label label-success&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">title</span><span class="o">,</span> <span class="n">quizAttempted</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">quizAttemptedSpan</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">span</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="n">title</span><span class="o">.</span><span class="nc">Replace</span><span class="o">(</span><span class="n">trimAndUnescape</span> <span class="n">span</span><span class="o">.</span><span class="nc">InnerText</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="o">).</span><span class="nc">Trim</span><span class="bp">()</span><span class="o">,</span> <span class="bp">true</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="n">title</span><span class="o">,</span> <span class="bp">false</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">videoUrl</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|&gt;</span> <span class="n">attr</span> <span class="s2">&quot;data-modal-iframe&quot;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">lectureNotesUrl</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">urls</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|&gt;</span> <span class="n">followingSibling</span> <span class="s2">&quot;div&quot;</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="n">elements</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'>                                 <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="n">attr</span> <span class="s2">&quot;href&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">match</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">tryFind</span> <span class="o">(</span><span class="n">endsWith</span> <span class="s2">&quot;.pdf&quot;</span><span class="o">)</span> <span class="n">urls</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">Some</span> <span class="n">url</span> <span class="o">-&gt;</span> <span class="n">url</span>
</span><span class='line'>                    <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">viewed</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|&gt;</span> <span class="n">parent</span> <span class="o">|&gt;</span> <span class="n">hasClass</span> <span class="s2">&quot;viewed&quot;</span>
</span><span class='line'>                <span class="o">{</span> <span class="nc">Id</span> <span class="o">=</span> <span class="n">id</span>
</span><span class='line'>                  <span class="nc">Title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>                  <span class="nc">VideoUrl</span> <span class="o">=</span> <span class="n">videoUrl</span>
</span><span class='line'>                  <span class="nc">LectureNotesUrl</span> <span class="o">=</span> <span class="n">lectureNotesUrl</span>
</span><span class='line'>                  <span class="nc">Viewed</span> <span class="o">=</span> <span class="n">viewed</span>
</span><span class='line'>                  <span class="nc">QuizAttempted</span> <span class="o">=</span> <span class="n">quizAttempted</span> <span class="o">})</span>
</span><span class='line'>            <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toArray</span>
</span><span class='line'>        <span class="o">{</span> <span class="nc">Title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>          <span class="nc">Completed</span> <span class="o">=</span> <span class="n">completed</span>
</span><span class='line'>          <span class="nc">Lectures</span> <span class="o">=</span> <span class="n">lectures</span> <span class="o">})</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">toArray</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FSharp.Data 1.1.9 released]]></title>
    <link href="http://blog.codebeside.org/blog/2013/07/21/fsharp-data-1-1-9-released"/>
    <updated>2013-07-21T22:14:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2013/07/21/fsharp-data-1-1-9-released</id>
    <content type="html"><![CDATA[<p>We&#8217;ve just released version <a href="http://www.nuget.org/packages/FSharp.Data/1.1.9">1.1.9</a> of <a href="http://fsharp.github.io/FSharp.Data/">FSharp.Data</a>, and I realized we&#8217;ve not been announcing new releases since version 1.1.1 when Tomas <a href="http://tomasp.net/blog/fsharp-data.aspx">first announced it</a>, so I though I&#8217;d rectify that. In addition to bug fixes, here what&#8217;s has been added to FSharp.Data since then:</p>

<ul>
<li>The behaviour of CsvProvider can be fine tuned by using the HasHeaders, Schema, IgnoreErrors, SafeMode, and PreferOptionals parameters. See the CsvProvider documentation <a href="http://fsharp.github.io/FSharp.Data/library/CsvProvider.html">here</a>.</li>
<li>The CSV Parser and Reader can now be used standalone. See the CsvFile documentation <a href="http://fsharp.github.io/FSharp.Data/library/CsvFile.html">here</a>.</li>
<li>Guid types are now supported in CsvProvider, JsonProvider, and XmlProvider.</li>
<li>Support to disable caching for CSV files too big to fit in memory.</li>
<li>Support for cookies, binary files and client certificates in FSharp.Net.Http.</li>
<li>Save, Filter, Take, TakeWhile, Skip, SkipWhile, and Truncate operations for CsvProvider and CsvFile.</li>
<li>Support for Windows Phone 7.</li>
</ul>


<p>There&#8217;s still a lot of room for improvement, and we love pull requests, so please contribute, even if it&#8217;s only fixing a typo in the docs. A getting started guide is available <a href="http://fsharp.github.io/FSharp.Data/contributing.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Type Providers - Part 1]]></title>
    <link href="http://blog.codebeside.org/blog/2013/05/13/building-type-providers-part1"/>
    <updated>2013-05-13T00:17:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2013/05/13/building-type-providers-part1</id>
    <content type="html"><![CDATA[<p>Type Providers are the biggest new feature of F# 3.0. They allow us to leverage the power of the static type system in areas that have typically been the territory of dynamic languages and stringly typing. A picture is worth a thousand words, so here&#8217;s 12 pictures that show type providers in action:</p>

<blockquote><p><a href="http://blogs.msdn.com/b/dsyme/archive/2013/01/30/twelve-type-providers-in-pictures.aspx">All your types are belong to us</a></p></blockquote>

<p>There are already several good samples and articles about using type providers, but there still isn&#8217;t a lot about creating type providers. Having worked recently on <a href="http://fsharp.github.com/FSharp.Data/">FSharp.Data</a> I decided to share some tips about building type providers.</p>

<!-- More -->


<h2>Getting Started</h2>

<p>The basic steps to creating a type provider are:</p>

<ul>
<li><p>Get the <code>ProvidedTypes.fs</code> and <code>ProvidedTypes.fsi</code> files from the <a href="http://fsharp3sample.codeplex.com/">F# 3.0 Sample Pack</a> and add it to your project.</p></li>
<li><p>Follow the instructions in <a href="http://msdn.microsoft.com/en-gb/library/hh361034.aspx">Tutorial: Creating a Type Provider</a> to create instances of <code>ProvidedTypeDefinition</code>, <code>ProvidedProperty</code>, <code>ProvidedMethod</code>, etc. in order to to define the API you want.</p></li>
</ul>


<p>After you&#8217;ve read that tutorial, let&#8217;s carry on&#8230;</p>

<h2>Hiding the underlying representation</h2>

<p>In the simplest of cases, there&#8217;s no underlying representation, so you just set the base class of your provided types to <code>obj</code>. You&#8217;ll create some expressions by wrapping code in <code>&lt;@@ ... @@&gt;</code> to create quotations, and assign them to the <code>InvokeCode</code> and <code>GetterCode</code> properties of your provided methods and properties, completely ignoring the <code>this</code> argument that is passed to them. After compilation, there will be no mention whatsoever of your provided types, they will have been all erased, and the only thing left is that code you defined inside the quotations. Effectively, the type providers are only giving you syntactic sugar and IntelliSense over things you could already accomplish without using them.</p>

<p>However, in most cases, there will be some underlying data representation, and you will probably want to create some types to hold that data. A big part of the logic will be in these types, and you&#8217;ll specify them as the base classes of your provided types. In this case, the F# compiler will copy and embed those base types in the assembly that is consuming the type provider. This means that in addition to the syntactic sugar, the assembly that&#8217;s referencing the type providers will also have some more additional code.</p>

<p>As expected, all the members of the base types will appear on the IntelliSense of the provided types. In some situations, that&#8217;s a good thing, and exactly what you wanted. On other cases (and I would guess most of the time), you intended those members to be just internal code to be used inside the implementation of the provided methods and properties, and you don&#8217;t want them to show up, as after all Type Providers are mostly about providing a nice API to its users. You can see this effect on the current version of the <a href="http://www.tryfsharp.org/Learn/data-science#world-bank-type-provider">World Bank type provider on TryF#</a>. If you press the dot after <code>data</code>, you&#8217;ll see that in addition to <code>Countries</code> and <code>Regions</code>, the IntelliSense pop-up will also include <code>_GetCountries</code>, <code>_GetRegions</code> and other members that aren&#8217;t intended for direct use. The ideal would be for them not to show up. How can we do that?</p>

<ul>
<li>If you came from an OO background, the first thing you&#8217;d think would be to make those members protected, but there is no <code>protected</code> modifier in F#. Even if there was, you&#8217;re not really creating a type and inheriting from the base type, it&#8217;s all erased.</li>
<li>You can&#8217;t also make those members <code>internal</code>, because your runtime representation types are always considered to belong to the type provider assembly, and not to the assembly that is using the type provider, even when the F# compiler copies those types over.</li>
<li>In C#, you can decorate methods and properties with <code>[System.ComponentModel.Browsable(false)]</code> to have them not show up on IntelliSense, but unfortunately that doesn&#8217;t work in F#.</li>
<li>You can create an interface with those members, and make your runtime representation types implement that interface. That way, they won&#8217;t show up on IntelliSense because F# always does explicit interface implementation. This won&#8217;t work for static members though.</li>
<li>The constructors of the erased to types don&#8217;t show up on the IntelliSense, so you can replace some static members like <code>Parse</code> and <code>Load</code> with constructors instead.</li>
<li>If you define a <code>ProvidedMethod</code> with the same parameter types of one of the methods of the runtime representation type, just with a different return type, that method will effectively be hidden, and you won&#8217;t need to do anything to hide it.</li>
<li><code>ProvidedTypeDefinition</code> has a <code>HideObjectMethods</code> property that allows you to hide the <code>GetHashCode()</code>, <code>GetType()</code>, <code>ToString()</code> and <code>Equals</code> methods from IntelliSense, but if the base type overrides any of those methods, they will show up anyway. I still haven&#8217;t found a workaround for this.</li>
</ul>


<p>The <a href="http://fsharp.github.com/FSharp.Data/">FSharp.Data</a> version of the World Bank type provider (and this also applies to the CSV, XML, JSON and Freebase type providers) uses interfaces and constructors to hide the unwanted members, so you don&#8217;t see any <code>_Something</code> method.</p>

<h2>Splitting into two assemblies</h2>

<p>When the type provider starts to get bigger, you might want to separate the runtime and design-time components into two separate assemblies. You also need to do this when you want to support multiple .NET framework profiles (like Silverlight or Portable Class Libraries), where you can have a single design-time assembly, but a different runtime assembly for each profile.</p>

<p>In this scenario, the design-time assembly can&#8217;t just reference the runtime assembly, because there are multiple versions of them. And even if you&#8217;re not supporting multiple profiles, the design-time assemblies of type providers are loaded inside the F# compiler process, which makes any assembly dependency for the design-time component to not work correctly. To work around this, usually there&#8217;s no dependency between the design-time assembly and the runtime assembly, and instead we include all the files of the runtime assembly directly in the design-time assembly. This may increase the size of the design-time component, but it&#8217;s not a big deal because that dll doesn&#8217;t need to be included in the final application.</p>

<p>But with this solution, comes a big problem: your quotations will stop working. Why? Because you&#8217;re referencing the types of the wrong assembly. To overcome this, the <code>TypeProviderConfig</code> that is passed to your type provider has a <code>RuntimeAssembly</code> property which allows you to load the runtime component using <code>Assembly.LoadFrom</code>, get the types you need using <code>Assembly.GetType</code>, and construct your expressions manually from that. Most of the samples in the <a href="http://fsharp3sample.codeplex.com/">F# 3.0 Sample Pack</a> use this. Great, problem solved, right?</p>

<p>Back in January, I started adding support for portable class libraries in <a href="http://fsharp.github.com/FSharp.Data/">FSharp.Data</a> because I wanted to use it on some Windows Phone and Windows 8 apps. After changing a couple of places from quotations to manually creating expression and using the reflection API, I though to myself:</p>

<blockquote><p>&#8220;No! The code was nice and clean with type safe quotations, and now I&#8217;m turning it to this mess with error prone reflection calls using a stringly typed api. It&#8217;s a huge step back. There has to be a better way.&#8221;</p></blockquote>

<p>And eventually after a couple of failed attempts and a lot of discussion on the github issue, I finally arrived at a solution: process the quotations to fix the type references to the right assembly. This is done by <code>AssemblyReplacer</code>, which you can find <a href="https://github.com/fsharp/FSharp.Data/blob/master/src/Providers/AssemblyReplacer.fs">here</a>. It&#8217;s pretty much independent of the rest of <a href="http://fsharp.github.com/FSharp.Data/">FSharp.Data</a>, so you can just copy it over to your type provider project if you need it.</p>

<p>There are places where even without splitting the type provider into a design-time and runtime assembly, it isn&#8217;t possible to use quotations, and you still need to keep creating expressions manually. That only happens when you use generics parameterized by a type generated by the type provider. For those, cases <a href="http://tomasp.net/">Tomas</a> has created a nice dynamic operator (?) implementation in <code>QuotationBuilder</code> which is available <a href="https://github.com/fsharp/FSharp.Data/blob/master/src/Providers/QuotationBuilder.fs">here</a>.</p>

<h2>Coming Next</h2>

<ul>
<li>Debugging type providers</li>
<li>Supporting multiple .NET framework profiles</li>
<li>Common errors found during type provider development</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F#, Windows Phone 7 & Visual Studio 2012]]></title>
    <link href="http://blog.codebeside.org/blog/2013/02/24/fsharp-windows-phone-7-visual-studio-2012"/>
    <updated>2013-02-24T00:00:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2013/02/24/fsharp-windows-phone-7-visual-studio-2012</id>
    <content type="html"><![CDATA[<p>F# 2.0 supported Silverlight 4, Silverlight 5, and Windows Phone 7.1, as several versions of FSharp.Core.dll were
shipped as part of the standalone F# redistribution. There were even some nice <a href="http://blogs.msdn.com/b/dsyme/archive/2010/08/20/f-windows-phone-7-silverlight-templates-now-on-visual-studio-gallery.aspx">Visual Studio 2010 templates</a> made by <a href="http://bloggemdano.blogspot.co.uk/">Daniel Mohl</a>.</p>

<p>In F# 3.0 there is no standalone redistributable package anymore, and Visual Studio 2012 only ships with two versions of FSharp.Core.dll: the full .NET 4.5 version, and a portable class library version targeting Profile47 (which includes .NET 4.5, Silverlight 5.0, and .NET for Windows Store apps).</p>

<p>I tried to create versions for Windows Phone 7 and for Profile88 (which additionally includes .NET 4.0, Silverlight 4.0, and Windows Phone 7.1) from the <a href="https://github.com/fsharp/fsharp">source code</a>, and I even got them to <a href="https://github.com/fsharp/fsharp/pull/102">compile</a>, but unfortunately I still get a bunch of Invalid Program exceptions at runtime when running on the emulator or on the device for both versions.</p>

<p>So I tried another approach - to reuse the FSharp.Core.dll version from F# 2.0 - and it seems to work just fine. Type providers and other new F# 3.0 features that depend on the library won&#8217;t work, but at least we can use Visual Studio 2012 and some of the features like the triple quotes.</p>

<!-- more -->


<p>To make this work we must force the F# compiler to compile for Silverlight 4, which is no longer supported, so we need to modify the file <code>C:\Program Files (x86)\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.targets</code> and comment out the following lines:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Error</span>
</span><span class='line'>    <span class="na">Condition=</span><span class="s">&quot;&#39;$(SilverlightVersion)&#39; != &#39;&#39; and &#39;$(SilverlightVersion)&#39; != &#39;v5.0&#39;&quot;</span>
</span><span class='line'>    <span class="na">Text=</span><span class="s">&quot;In this version of Visual Studio, F# for Silverlight can only target Silverlight v5.0. Use a prior version of Visual Studio to target previous versions of Silverlight with F#.&quot;</span>
</span><span class='line'><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then if you take Daniel Mohl&#8217;s template, change the manifest to state it supports Visual Studio 2012, and upgrade the .csproj and .fsproj files, it all works. I&#8217;ve uploaded the updated template to the <a href="http://visualstudiogallery.msdn.microsoft.com/241d3a0a-a0a7-42f5-badf-bbbed30514c8">Visual Studio Gallery</a>.</p>

<p>Here&#8217;s a small sample of loading some data asynchronously and databinding to a record:</p>

<figure class='code'><figcaption><span>F# Code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Topic</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="nc">Id</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>      <span class="nc">Name</span> <span class="o">:</span> <span class="kt">string</span>
</span><span class='line'>      <span class="nc">Icon</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">PopulateTopics</span> <span class="o">(</span><span class="n">addTopic</span> <span class="o">:</span> <span class="nc">Action</span><span class="o">&lt;</span><span class="nc">Topic</span><span class="o">&gt;)</span> <span class="o">(</span><span class="n">onFinish</span> <span class="o">:</span> <span class="nc">Action</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">synchronizationContext</span> <span class="o">=</span> <span class="nn">SynchronizationContext</span><span class="p">.</span><span class="nc">Current</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">doInUiThred</span> <span class="n">f</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">synchronizationContext</span><span class="o">.</span><span class="nc">Post</span> <span class="o">((</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="bp">()</span><span class="o">),</span> <span class="k">null</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">async</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">let</span><span class="o">!</span> <span class="n">topics</span> <span class="o">=</span> <span class="o">(...)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">topic</span> <span class="k">in</span> <span class="n">topics</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">doInUiThred</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">addTopic</span><span class="o">.</span><span class="nc">Invoke</span> <span class="n">topic</span><span class="o">)</span>
</span><span class='line'>        <span class="n">doInUiThred</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">onFinish</span><span class="o">.</span><span class="nc">Invoke</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Catch</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Ignore</span> <span class="o">|&gt;</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Start</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>XAML code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Grid&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ScrollViewer&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ItemsControl</span> <span class="na">x:Name=</span><span class="s">&quot;topicsList&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ItemsControl.ItemTemplate&gt;</span>
</span><span class='line'>                <span class="nt">&lt;DataTemplate&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;Button</span> <span class="na">Click=</span><span class="s">&quot;OnTopicButtonClick&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Grid&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;Image</span> <span class="na">Source=</span><span class="s">&quot;{Binding Icon}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;TextBlock</span> <span class="na">Foreground=</span><span class="s">&quot;Black&quot;</span>
</span><span class='line'>                                       <span class="na">FontWeight=</span><span class="s">&quot;Bold&quot;</span>
</span><span class='line'>                                       <span class="na">FontSize=</span><span class="s">&quot;40&quot;</span>
</span><span class='line'>                                       <span class="na">TextWrapping=</span><span class="s">&quot;Wrap&quot;</span>
</span><span class='line'>                                       <span class="na">Text=</span><span class="s">&quot;{Binding Name}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/Grid&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/Button&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/DataTemplate&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ItemsControl.ItemTemplate&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ItemsControl&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ScrollViewer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;TextBlock</span> <span class="na">Margin=</span><span class="s">&quot;0,0,0,200&quot;</span>
</span><span class='line'>               <span class="na">HorizontalAlignment=</span><span class="s">&quot;Center&quot;</span>
</span><span class='line'>               <span class="na">VerticalAlignment=</span><span class="s">&quot;Center&quot;</span>
</span><span class='line'>               <span class="na">Text=</span><span class="s">&quot;Loading...&quot;</span>
</span><span class='line'>               <span class="na">Visibility=</span><span class="s">&quot;Collapsed&quot;</span>
</span><span class='line'>               <span class="na">x:Name=</span><span class="s">&quot;loading&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/Grid&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>C# Code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">OnLoaded</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">loading</span><span class="p">.</span><span class="n">Visibility</span> <span class="p">=</span> <span class="n">Visibility</span><span class="p">.</span><span class="n">Visible</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">topics</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">Topic</span><span class="p">&gt;();</span>
</span><span class='line'>    <span class="n">topicsList</span><span class="p">.</span><span class="n">ItemsSource</span> <span class="p">=</span> <span class="n">topics</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PopulateTopics</span><span class="p">(</span>
</span><span class='line'>        <span class="n">topic</span> <span class="p">=&gt;</span> <span class="n">topics</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">topic</span><span class="p">),</span>
</span><span class='line'>        <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">loading</span><span class="p">.</span><span class="n">Visibility</span> <span class="p">=</span> <span class="n">Visibility</span><span class="p">.</span><span class="n">Collapsed</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">OnTopicButtonClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">topic</span> <span class="p">=</span> <span class="p">(</span><span class="n">Topic</span><span class="p">)((</span><span class="n">Button</span><span class="p">)</span><span class="n">sender</span><span class="p">).</span><span class="n">DataContext</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NavigationService</span><span class="p">.</span><span class="n">Navigate</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">&quot;/TopicPage.xaml?id=&quot;</span> <span class="p">+</span> <span class="n">topic</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">UriKind</span><span class="p">.</span><span class="n">Relative</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# as a Octave/Matlab replacement for Machine Learning]]></title>
    <link href="http://blog.codebeside.org/blog/2011/10/27/f-as-a-octavematlab-replacement-for-machine-learning"/>
    <updated>2011-10-27T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2011/10/27/f-as-a-octavematlab-replacement-for-machine-learning</id>
    <content type="html"><![CDATA[<p>
	<strong>EDIT</strong>: As another version of the ml-class course has started, I&#39;ve made the repository private</p>
<p>
	Back when I was in college, I took three different courses that dealt with subjects related to machine learning and data mining. Although I didn&rsquo;t lose interest on those matters, my work has led me in a totally unrelated direction, so I haven&rsquo;t exercised any of that knowledge in about eight years or so. A few weeks ago, I stumbled upon Stanford&rsquo;s online class on <a href="http://www.ml-class.org">Machine Learning</a> and decided to enroll. I want to revive many of the things I have forgotten and try to put them into practice, as nowadays it&rsquo;s very easy to access large amounts of interesting data from all kinds of online sources.</p>
<p>
	The programming exercises of this class are supposed to be done in Octave or Matlab, and while I understand the advantages of these tools, my past experience (where all the exercises and projects were done either with SAS or with Matlab) shows me that not using a general purpose programming languages doesn&rsquo;t help a lot in turning academic exercises into real world programs. As professor Andrew Ng said in the introduction, one of the goals of the class is for us to put machine learning into practice in real world problems we care about, so I decided that I&rsquo;ll implement all the algorithms and exercises in F#.</p>
    <!-- more -->
<p>
	I&rsquo;m using <a href="http://numerics.mathdotnet.com/">Math.NET Numerics</a> for the linear algebra and statistics, and while some operations are not as simple as in Octave, being able to use higher order functions instead of for loops compensates for it. As an example, look at the code for feature normalization in Octave:</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="k">function</span><span class="w"> </span>[X_norm, mu, sigma] <span class="p">=</span><span class="w"> </span><span class="nf">featureNormalize</span><span class="p">(</span>X<span class="p">)</span><span class="w"></span>
</span><span class='line'>
</span><span class='line'><span class="n">X_norm</span> <span class="p">=</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mu</span> <span class="p">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">X</span><span class="p">);</span>
</span><span class='line'><span class="n">sigma</span> <span class="p">=</span> <span class="n">std</span><span class="p">(</span><span class="n">X</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> 1<span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="nb">i</span> <span class="p">=</span> 1<span class="p">:</span><span class="n">m</span>
</span><span class='line'>    <span class="n">X_norm</span><span class="p">(</span><span class="nb">i</span><span class="p">,:)</span> <span class="p">=</span> <span class="p">(</span><span class="n">X</span><span class="p">(</span><span class="nb">i</span><span class="p">,:)</span> <span class="o">-</span> <span class="n">mu</span><span class="p">)</span> <span class="o">./</span> <span class="n">sigma</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	And here&rsquo;s the equivalent F# code:</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">featureNormalize</span> <span class="o">(</span><span class="nc">X</span><span class="o">:</span> <span class="o">#</span><span class="nc">Matrix</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="err">μ</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">X</span><span class="p">.</span><span class="nc">ColumnEnumerator</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">col</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">col</span><span class="o">.</span><span class="nc">Mean</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">DenseVector</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="err">σ</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">X</span><span class="p">.</span><span class="nc">ColumnEnumerator</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">col</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">col</span><span class="o">.</span><span class="nc">StandardDeviation</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">DenseVector</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nc">X</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">X</span> <span class="o">|&gt;</span> <span class="nn">Matrix</span><span class="p">.</span><span class="n">mapRows</span> <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="n">row</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">row</span> <span class="o">-</span> <span class="err">μ</span><span class="o">)</span> <span class="o">./</span> <span class="err">σ</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">(</span><span class="nc">X</span><span class="o">,</span> <span class="err">μ</span><span class="o">,</span> <span class="err">σ</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	Even though calculating the mean and standard deviation is a little more elaborate than using just a built-in function call, the actual normalization code is more straightforward, so we&rsquo;re not really loosing any productivity by using F#, considering that we have the same kind of development interactivity thanks to F# Interactive. Other nice touches in F# are the ability to use greek letters and the possibility of separating the data from the algorithm parameters by means of the pipelining operator (|&gt;). By leaving all the data parameters at the end and aggregating them into a tuple, we can turn this code:</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nn">LinearRegression</span><span class="p">.</span><span class="n">plotGradientDescentIterations</span> <span class="err">α</span> <span class="n">num_iters</span> <span class="nc">XNorm</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	into this:</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">(</span><span class="nc">XNorm</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="nn">LinearRegression</span><span class="p">.</span><span class="n">plotGradientDescentIterations</span> <span class="err">α</span> <span class="n">num_iters</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	which I think is clearer.</p>
<p>
	I also like the fact that Math.NET Numerics has a separate type for vectors instead of using one-column or one-row matrices for that, allowing us not to worry about transposing the vectors when multiplying.</p>
<p>
	Mimicking Matlab charting capabilities was a bit more tricky. For the majority of charting I&rsquo;m using <a href="http://code.msdn.microsoft.com/FSharpChart-b59073f5">FSharpChart</a>, but the Microsoft Chart Controls that it wraps don&rsquo;t support contour nor surface plots. For contour plots I ended up using <a href="http://dynamicdatadisplay.codeplex.com/">WPF Dynamic Data Display</a>, and for surface plots I adapted a <a href="http://www.codeproject.com/KB/WPF/WPFChart3D.aspx">sample from CodeProject</a>. I&rsquo;m not really happy with the surface plot, as it&rsquo;s really very basic, so I&rsquo;ll definitely try to improve it in the future. Here&rsquo;s a sample of charts from Matlab:</p>
<p>
	<a href="http://blog.codebeside.org/images/image.png"><img alt="image" border="0" height="217" src="http://blog.codebeside.org/images/image_thumb.png" style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_1.png"><img alt="image" border="0" height="217" src="http://blog.codebeside.org/images/image_thumb_1.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_2.png"><img alt="image" border="0" height="217" src="http://blog.codebeside.org/images/image_thumb_2.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_3.png"><img alt="image" border="0" height="217" src="http://blog.codebeside.org/images/image_thumb_3.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a></p>
<p>
	And here are the equivalent ones I was able to produce in F#:</p>
<p>
	<a href="http://blog.codebeside.org/images/image_4.png"><img alt="image" border="0" height="244" src="http://blog.codebeside.org/images/image_thumb_4.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_5.png"><img alt="image" border="0" height="244" src="http://blog.codebeside.org/images/image_thumb_5.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_6.png"><img alt="image" border="0" height="244" src="http://blog.codebeside.org/images/image_thumb_6.png" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a><a href="http://blog.codebeside.org/images/image_7.png"><img alt="image" border="0" height="244" src="http://blog.codebeside.org/images/image_thumb_7.png" style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="244" /></a></p>
<p>
	I&rsquo;m putting this available at <a href="https://github.com/ovatsus/MLClass">https://github.com/ovatsus/MLClass</a>. I&rsquo;m only going to push the commits weekly after the class exercise deadlines expire, so at the time of this post only the implementation of the Linear Regression exercises is available.</p>
<p>
	So far this has been a very rewarding experience, as besides preparing the way so I can reuse this code in the future, I&#39;ve been submitting patches both to Math.NET Numerics and to FSharpChart.</p>
<p>
	<strong>Edit:</strong></p>
<p>
	As some people have pointed out in the comments, the Octave version of feature normalization could also be done without iteration:</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="k">function</span><span class="w"> </span>[X_norm, mu, sigma] <span class="p">=</span><span class="w"> </span><span class="nf">featureNormalize</span><span class="p">(</span>X<span class="p">)</span><span class="w"></span>
</span><span class='line'>
</span><span class='line'><span class="n">mu</span> <span class="p">=</span> <span class="n">mean</span><span class="p">(</span><span class="n">X</span><span class="p">);</span>
</span><span class='line'><span class="n">sigma</span> <span class="p">=</span> <span class="n">std</span><span class="p">(</span><span class="n">X</span><span class="p">);</span>
</span><span class='line'><span class="n">m</span> <span class="p">=</span> <span class="nb">size</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> 1<span class="p">);</span>
</span><span class='line'><span class="n">X_norm</span> <span class="p">=</span> <span class="p">(</span><span class="n">X</span> <span class="o">-</span> <span class="nb">repmat</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> 1<span class="p">))</span> <span class="o">/</span> <span class="nb">diag</span><span class="p">(</span><span class="n">sigma</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	In this case the corresponding F# code would be:</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">featureNormalize</span> <span class="o">(</span><span class="nc">X</span><span class="o">:</span> <span class="nc">Matrix</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;)</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="err">μ</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">X</span><span class="p">.</span><span class="nc">ColumnEnumerator</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">col</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">col</span><span class="o">.</span><span class="nc">Mean</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">DenseVector</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="err">σ</span> <span class="o">=</span>
</span><span class='line'>        <span class="nn">X</span><span class="p">.</span><span class="nc">ColumnEnumerator</span><span class="bp">()</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">col</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">col</span><span class="o">.</span><span class="nc">StandardDeviation</span><span class="bp">()</span><span class="o">)</span>
</span><span class='line'>        <span class="o">|&gt;</span> <span class="nn">DenseVector</span><span class="p">.</span><span class="n">ofSeq</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="err">μ</span><span class="nc">Expanded</span> <span class="o">=</span> <span class="nn">DenseMatrix</span><span class="p">.</span><span class="n">initRow</span> <span class="nn">X</span><span class="p">.</span><span class="nc">RowCount</span> <span class="nn">X</span><span class="p">.</span><span class="nc">ColumnCount</span> <span class="o">(</span><span class="k">fun</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="err">μ</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="err">σ</span><span class="nc">Diag</span> <span class="o">=</span> <span class="nn">DenseMatrix</span><span class="p">.</span><span class="n">diag</span> <span class="err">σ</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nc">X</span> <span class="o">=</span> <span class="o">(</span><span class="nc">X</span> <span class="o">-</span> <span class="err">μ</span><span class="nc">Expanded</span><span class="o">)</span> <span class="o">*</span> <span class="err">σ</span><span class="nn">Diag</span><span class="p">.</span><span class="nc">Inverse</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">(</span><span class="nc">X</span><span class="o">,</span> <span class="err">μ</span><span class="o">,</span> <span class="err">σ</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing PreSharp]]></title>
    <link href="http://blog.codebeside.org/blog/2011/10/02/introducing-presharp"/>
    <updated>2011-10-02T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2011/10/02/introducing-presharp</id>
    <content type="html"><![CDATA[<h3>Background</h3>  <p>Back in 2004, I was doing some code-generation work as part of the <a href="http://www.gsd.inesc-id.pt/project-pages/past-projects/obiwan">OBIWAN</a> project. When I started, CodeDom was being used to do the work, but I really didn’t like it because it made the generator code very hard to read and modify. Realistically, I would not need to support any other language than C#, so I started looking for alternatives. <a href="http://www.codesmithtools.com/product/generator">CodeSmith</a> was very popular at the time for generating type-safe collections (.NET 2.0 generics didn’t exist yet), but it was targeted at one-shot generations, and not at creating code generation code. Then I found a very simple tool named <a href="http://web.archive.org/web/20060726075638/http://www.inmetrix.com/">CodeGen</a> that appealed to me. I had been playing around with the <a href="http://www.boost.org/doc/libs/?view=category_Preprocessor">Boost Preprocessor library</a> recently, so I really liked the idea of using the preprocessor. I did a few tweaks to it and was able to use it for my needs at the time. Later on, around mid-2007, I needed to do code-generation again, so I took this tool and added a good amount of more power to it. At this time, it was very far apart from the original code, so I re-baptized it as PreSharp and published it to CodePlex. I never got around to do any documentation for it, so I’m making this post to try to compensate for that. I also moved the project recently from CodePlex to <a href="https://github.com/ovatsus/PreSharp">GitHub</a>.</p>
<!-- more -->
<h3>PreSharp as a C# Preprocessor</h3>  <p>Let’s say we’re using .NET 2.0 which doesn’t have the Func&lt;&gt; delegates and we want to define our own: </p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TResult</span><span class="p">&gt;();</span>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">);</span>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">arg2</span><span class="p">);</span>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">T3</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">T3</span> <span class="n">arg3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>This gets tedious really quickly, so let’s use PreSharp to generate this for us:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cp">#if PRESHARP_TEMPLATE</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="m">10</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;&lt;%</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span><span class="n">T</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;,</span> <span class="p">&lt;%</span> <span class="p">}</span>
</span><span class='line'>                                 <span class="p">%&gt;</span><span class="n">TResult</span><span class="p">&gt;(&lt;%</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;&lt;%=</span> <span class="n">j</span> <span class="p">==</span> <span class="m">1</span> <span class="p">?</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span> <span class="p">:</span> <span class="s">&quot;, &quot;</span> <span class="p">%&gt;</span><span class="n">T</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;</span> <span class="n">arg</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;&lt;%</span> <span class="p">}</span>
</span><span class='line'>                                                <span class="p">%&gt;);</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>

<p align="left">Now if we run <a href="https://github.com/downloads/ovatsus/PreSharp/PreSharp.exe">PreSharp.exe</a> &lt;file.cs&gt;, that region of code will be turned into this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cp">#if PRESHARP_TEMPLATE</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="m">5</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;&lt;%</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span><span class="n">T</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;,</span> <span class="p">&lt;%</span> <span class="p">}</span>
</span><span class='line'>                                 <span class="p">%&gt;</span><span class="n">TResult</span><span class="p">&gt;(&lt;%</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;&lt;%=</span> <span class="n">j</span> <span class="p">==</span> <span class="m">1</span> <span class="p">?</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span> <span class="p">:</span> <span class="s">&quot;, &quot;</span> <span class="p">%&gt;</span><span class="n">T</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;</span> <span class="n">arg</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;&lt;%</span> <span class="p">}</span>
</span><span class='line'>                                                <span class="p">%&gt;);</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#region PreSharp Generated</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">TResult</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">arg2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">T3</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">T3</span> <span class="n">arg3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">T3</span><span class="p">,</span> <span class="n">T4</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">T3</span> <span class="n">arg3</span><span class="p">,</span> <span class="n">T4</span> <span class="n">arg4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">,</span> <span class="n">T3</span><span class="p">,</span> <span class="n">T4</span><span class="p">,</span> <span class="n">T5</span><span class="p">,</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">arg2</span><span class="p">,</span> <span class="n">T3</span> <span class="n">arg3</span><span class="p">,</span> <span class="n">T4</span> <span class="n">arg4</span><span class="p">,</span> <span class="n">T5</span> <span class="n">arg5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endregion</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, the syntax is similar to ASP.NET, similarly to most template based code generators: code between &lt;% and %&gt; is executed; code between &lt;%= and %&gt; is evaluated as an expression; and the rest of the code is dumped to the output directly.</p>

<h3>PreSharp as a Source Code Generator Generator</h3>

<p>The real power of PreSharp comes when instead of PRESHARP_TEMPLATE we use PRESHARP_TEMPLATE_LIBRARY. In this case the output after running PreSharp will be the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cp">#if PRESHARP_TEMPLATE_LIBRARY</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="m">10</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;&lt;%</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;</span><span class="n">T</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;,</span> <span class="p">&lt;%</span> <span class="p">}</span>
</span><span class='line'>                                 <span class="p">%&gt;</span><span class="n">TResult</span><span class="p">&gt;(&lt;%</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="p">%&gt;&lt;%=</span> <span class="n">j</span> <span class="p">==</span> <span class="m">1</span> <span class="p">?</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span> <span class="p">:</span> <span class="s">&quot;, &quot;</span> <span class="p">%&gt;</span><span class="n">T</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;</span> <span class="n">arg</span><span class="p">&lt;%=</span> <span class="n">j</span> <span class="p">%&gt;&lt;%</span> <span class="p">}</span>
</span><span class='line'>                                                <span class="p">%&gt;);</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#region PreSharp Generated</span>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="m">10</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>     <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;\r\n&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;public delegate TResult Func&lt;&quot;</span><span class="p">);</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>         <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;T&quot;</span><span class="p">);</span><span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span> <span class="n">j</span> <span class="p">);</span>  <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>                                   <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;TResult&gt;(&quot;</span><span class="p">);</span>
</span><span class='line'>       <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>         <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span> <span class="n">j</span> <span class="p">==</span> <span class="m">1</span> <span class="p">?</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span> <span class="p">:</span> <span class="s">&quot;, &quot;</span> <span class="p">);</span><span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;T&quot;</span><span class="p">);</span><span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span> <span class="n">j</span> <span class="p">);</span><span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot; arg&quot;</span><span class="p">);</span><span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span> <span class="n">j</span> <span class="p">);</span>   <span class="p">}</span>
</span><span class='line'>                                                    <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;);\r\n&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span> <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;\r\n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endregion</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>

<p>So if we use this in a context were we have an object named <strong>writer</strong> with a method <strong>Write</strong> that accepts a string, it will generate the code for generating the code at runtime. It’s ugly code, but it does the job, and we can collapse all the #region PreSharp Generated blocks. If instead of <strong>writer</strong>, we have a variable named something else, we can suffix the #if directive with _variableName. For example, if we want <strong>output</strong> as the variable name, we’ll use PRESHARP_TEMPLATE_LIBRARY_output.</p>

<h3>Visual Studio Integration</h3>

<p>To setup the Visual Studio integration of PreSharp we just need to run it once without parameters. It will copy itself to C:\Program Files (x86)\PreSharp, customize MSBuild Custom.After.Microsoft.Common.targets and set some Visual Studio settings in the registry.</p>

<p>After this is setup, instead of running PreSharp.exe manually, we can just change the build action of the relevant files in Visual Studio from Compile to <strong>PreSharpInplace</strong>. This will make sure PreSharp is run before the compilation phase.</p>

<p>When there is any error in the code inside a PreSharp block, the errors will be displayed in the Visual Studio errors pane, next to the compilation errors, and we can double click them to go to the correct location. In some cases PreSharp fails the column number by a few characters, but the line number is always right.</p>

<p>As this is implemented through MSBuild tasks, it will also work in command line builds. Some other tools use Custom Tools that only work inside Visual Studio (but which have other advantages, like&#160; being able to display generated files below the source file in Solution Explorer).</p>

<h3>Reusing code</h3>

<p>Each PreSharp block is compiled independently of each other. If we need to share code, we must put it in separate files and set the build action to <strong>PreSharpTemplateLibrary</strong>. Then all public classes of those files will be available inside normal PreSharp template blocks. Additionally, you can also use directives inside template blocks to import namespaces and to reference assemblies, by using <strong>&lt;%@ Import Namespace=&quot;NamespaceToImport&quot; %&gt;</strong> and <strong>&lt;%@ Assembly Name=&quot;AssemblyToReference&quot; %&gt;</strong>.</p>

<p>Let’s rewrite our example to take advantage of these features. We’ll add a file StringUtils.cs with the build action set to <strong>PreSharpTemplateLibrary</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">StringUtils</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">StrCat</span><span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">source</span><span class="p">,</span> <span class="kt">string</span> <span class="n">separator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">sb</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">first</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">elem</span> <span class="k">in</span> <span class="n">source</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">first</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">first</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">separator</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">elem</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sb</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>And then change the original PreSharp block to this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cp">#if PRESHARP_TEMPLATE</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">Assembly</span> <span class="n">Name</span><span class="p">=</span><span class="s">&quot;System.Core&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">Import</span> <span class="n">Namespace</span><span class="p">=</span><span class="s">&quot;System.Linq&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="m">5</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">range</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;&lt;%=</span> <span class="n">range</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">ii</span> <span class="p">=&gt;</span> <span class="s">&quot;T&quot;</span> <span class="p">+</span> <span class="n">ii</span> <span class="p">+</span> <span class="s">&quot;, &quot;</span><span class="p">)</span>
</span><span class='line'>                                      <span class="p">.</span><span class="n">StrCat</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span> <span class="p">%&gt;</span><span class="n">TResult</span><span class="p">&gt;(&lt;%=</span> <span class="n">range</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">ii</span> <span class="p">=&gt;</span> <span class="s">&quot;T&quot;</span> <span class="p">+</span> <span class="n">ii</span> <span class="p">+</span> <span class="s">&quot; arg&quot;</span> <span class="p">+</span> <span class="n">ii</span><span class="p">)</span>
</span><span class='line'>                                                                      <span class="p">.</span><span class="n">StrCat</span><span class="p">(</span><span class="s">&quot;, &quot;</span><span class="p">)</span> <span class="p">%&gt;);</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="p">}</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>

<p>In the <strong>Assembly</strong> directive you can specify the full path of an assembly (and in that case don’t forget to include the .dll at the end), or if that assembly is referenced by the Visual Studio project you can just specify the assembly name. PreSharp takes advantage of part of the MSBuild processing to find the file path.</p>

<p>In order for Visual Studio IntelliSense to work properly, StringUtils will be compiled into your assembly in debug builds, but it release builds it won’t, as this code is only meant to be used in your PreSharp blocks.</p>

<h3>Generating files</h3>

<p>Instead of generating code in-place in a C# file, PreSharp can also be used to define code that will be called at compile time to output additional files to the project. For that, we will use a new build action - <strong>PreSharpTemplate</strong>. Here’s an example:</p>

<p>File ViewModelGenerator.cst with build action set to <strong>PreSharpTemplate</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cp">#if PRESHARP_TEMPLATE</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">CodeTemplate</span> <span class="n">Language</span><span class="p">=</span><span class="s">&quot;C#&quot;</span> <span class="n">TargetLanguage</span><span class="p">=</span><span class="s">&quot;C#&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">Assembly</span> <span class="n">Name</span><span class="p">=</span><span class="s">&quot;System.Core&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">Assembly</span> <span class="n">Name</span><span class="p">=</span><span class="s">&quot;System.Xml&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">Assembly</span> <span class="n">Name</span><span class="p">=</span><span class="s">&quot;System.Xml.Linq&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">Include</span> <span class="n">Path</span><span class="p">=</span><span class="s">&quot;ViewModelDefinition.cst&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">EntryPoint</span> <span class="n">Statement</span><span class="p">=</span><span class="s">&quot;CodeGeneration.ViewModelGenerator.Generate();&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Xml.Linq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">CodeGeneration</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">ViewModelGenerator</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Generate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">viewXml</span> <span class="k">in</span> <span class="n">XElement</span><span class="p">.</span><span class="n">Load</span><span class="p">(</span><span class="s">&quot;ViewModel.xml&quot;</span><span class="p">).</span><span class="n">Elements</span><span class="p">(</span><span class="s">&quot;view&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="kt">var</span> <span class="n">view</span> <span class="p">=</span> <span class="k">new</span> <span class="n">View</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Name</span> <span class="p">=</span> <span class="n">viewXml</span><span class="p">.</span><span class="n">Attribute</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">).</span><span class="n">Value</span><span class="p">,</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>                <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">propertyXml</span> <span class="k">in</span> <span class="n">viewXml</span><span class="p">.</span><span class="n">Elements</span><span class="p">(</span><span class="s">&quot;property&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">view</span><span class="p">.</span><span class="n">Properties</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Property</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">PropertyName</span> <span class="p">=</span> <span class="n">propertyXml</span><span class="p">.</span><span class="n">Attribute</span><span class="p">(</span><span class="s">&quot;name&quot;</span><span class="p">).</span><span class="n">Value</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">Type</span> <span class="p">=</span> <span class="n">propertyXml</span><span class="p">.</span><span class="n">Attribute</span><span class="p">(</span><span class="s">&quot;type&quot;</span><span class="p">).</span><span class="n">Value</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">view</span><span class="p">.</span><span class="n">Dump</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>File ViewModel.xml with build action set to <strong>PreSharpInput</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;viewModel&gt;</span>
</span><span class='line'>    <span class="nt">&lt;view</span> <span class="na">name=</span><span class="s">&quot;View1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;Property1&quot;</span> <span class="na">type=</span><span class="s">&quot;string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;Property2&quot;</span> <span class="na">type=</span><span class="s">&quot;int&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/view&gt;</span>
</span><span class='line'>    <span class="nt">&lt;view</span> <span class="na">name=</span><span class="s">&quot;View2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;Property&quot;</span> <span class="na">type=</span><span class="s">&quot;bool&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/view&gt;</span>
</span><span class='line'><span class="nt">&lt;/viewModel&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>File ViewModelDefinition.cst with build action set to <strong>PreSharpTemplateInclude</strong>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cp">#if PRESHARP_TEMPLATE</span>
</span><span class='line'><span class="p">&lt;%</span><span class="err">@</span> <span class="n">Import</span> <span class="n">Namespace</span><span class="p">=</span><span class="s">&quot;System.Collections.Generic&quot;</span> <span class="p">%&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">CodeGeneration</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Property</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">PropertyName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">FieldName</span> <span class="p">{</span> <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">PropertyName</span><span class="p">.</span><span class="n">ToLower</span><span class="p">();</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Type</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">View</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Property</span><span class="p">&gt;</span> <span class="n">Properties</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Property</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dump</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#if PRESHARP_TEMPLATE</span>
</span><span class='line'><span class="p">&lt;%</span> <span class="n">PreSharp</span><span class="p">.</span><span class="n">SetOutput</span><span class="p">(</span><span class="n">Name</span> <span class="p">+</span> <span class="s">&quot;.Generated.cs&quot;</span><span class="p">,</span> <span class="n">PreSharp</span><span class="p">.</span><span class="n">OutputType</span><span class="p">.</span><span class="n">Compile</span><span class="p">);</span> <span class="p">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="err">&lt;%= </span><span class="nc">Name</span> <span class="p">%&gt;</span> <span class="p">:</span> <span class="n">ViewModelBase</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">p</span> <span class="k">in</span> <span class="n">Properties</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#if PRESHARP_TEMPLATE</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="p">&lt;%=</span> <span class="n">p</span><span class="p">.</span><span class="n">Type</span> <span class="p">%&gt;</span> <span class="p">&lt;%=</span> <span class="n">p</span><span class="p">.</span><span class="n">FieldName</span> <span class="p">%&gt;;</span>
</span><span class='line'>    <span class="k">public</span> <span class="p">&lt;%=</span> <span class="n">p</span><span class="p">.</span><span class="n">Type</span> <span class="p">%&gt;</span> <span class="p">&lt;%=</span> <span class="n">p</span><span class="p">.</span><span class="n">PropertyName</span> <span class="p">%&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="p">&lt;%=</span> <span class="n">p</span><span class="p">.</span><span class="n">FieldName</span> <span class="p">%&gt;;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">set</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(&lt;%=</span> <span class="n">p</span><span class="p">.</span><span class="n">FieldName</span> <span class="p">%&gt;</span> <span class="p">!=</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span> <span class="p">&lt;%=</span> <span class="n">p</span><span class="p">.</span><span class="n">FieldName</span> <span class="p">%&gt;</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaiseNotify</span><span class="p">(</span><span class="s">&quot;&lt;%= p.PropertyName %&gt;&quot;</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'><span class="cp">#if PRESHARP_TEMPLATE</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let me explain how this works:</p>

<ul>
  <li>The file with the build action set to <strong>PreSharpTemplate</strong> must specify directive with the format <strong>&lt;%@ EntryPoint Statement=&quot;codeToExecute();&quot; %&gt;</strong> to tell PreSharp what code to execute at compile time. That code can call PreSharp.SetOutput(string filename, PreSharp.OutputType outputType) inside the blocks to set the output file (OutputType is an enum with the values <strong>Compile</strong>, <strong>EmbeddedResource</strong>, and <strong>None</strong>). From that point on, the code generated by the PreSharp blocks will be written to that file, and that file will be added to the Visual Studio project with the corresponding build action. </li>

  <li>The build action <strong>PreSharpTemplateInclude</strong> and the associated <strong>&lt;%@ Include Path=&quot;path&quot; %&gt;</strong> directive allow you to split generators in multiple files. If you just have multiple files with PreSharpTemplate build action they will all be handled independently.</li>

  <li>In the examples I uses the extension .cst but in reality it could be anything. When PreSharp is installed it registers .cst in Visual Studio as a c# file, so you can use that extension and still have syntax highlighting. </li>

  <li>The build action <strong>PreSharpInput</strong> informs PreSharp that whenever that file is changed, it should regenerate the target files. </li>

  <li>The <strong>&lt;%@ CodeTemplate Language=&quot;C#&quot; TargetLanguage=&quot;C#&quot; %&gt; </strong>directive is ignored, and it’s only supported to allow compatibility with CodeSmith so you can edit these files in its editor and have syntax highlighting.</li>
</ul>

<h3>Debugging</h3>

<p>When PreSharp executes the templates in the previous example, it generates a file named ViewModelGenerator.cst.PreSharpDebug.cs. If you want to debug the template execution, you can create a new C# project that includes this file, references C:\Program Files (x86)\PreSharp\PreSharp.exe as an assembly, and then put the contents of the Entry directive as the Main method. When running this project you can step by step the execution of the template.</p>

<h3>Known Problems</h3>

<p>I’ve been using PreSharp for a few years in real-life production software, so it’s pretty stable and efficient by now. But there is still one very annoying problem with it. If you have a generated file open and then build the project and that file is changed, Visual Studio will wrongly use the cache of the previous content of the file in the compilation, and your build output will be wrong. At OutSystems we call this the “double build syndrome”. If you don’t have that file open, or if you’re building directly with MSBuild on a command shell or on a build server, it all works correctly, so it’s really a Visual Studio bug.</p>

<p>Aside from this post (which I should have done three years ago when I first created the blog), there is currently no other documentation for PreSharp, so feel free to ask any question through a comment here or through the GitHub project page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft: please eat some more of your WPF-flavored dog food]]></title>
    <link href="http://blog.codebeside.org/blog/2011/09/27/microsoft-please-eat-some-more-of-your-wpf-flavored-dog-food"/>
    <updated>2011-09-27T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2011/09/27/microsoft-please-eat-some-more-of-your-wpf-flavored-dog-food</id>
    <content type="html"><![CDATA[<p>
	I have&nbsp; a love-hate relationship with WPF.</p>
<p>
	I think it is several orders of magnitude better than Windows Forms and gives developers a tremendous expressive power to materialize their ideas into good user interfaces. I wouldn&rsquo;t dream of doing many of the things I was able to do in just a few weeks in the <a href="http://www.outsystems.com/agile-platform/">Agile Platform IDE</a> in any other UI framework, even if I was given months. It&rsquo;s like going from plain C to C# 4.</p>
<p>
	But even though the concept is really good, the quality and completeness of the concrete implementation are really not there. There are just too many quirks, weird limitations, parts that don&rsquo;t play nice with others, performance problems, memory leaks, etc&#8230; And when things don&rsquo;t work as they should, many times you really have to go out of your way to be able to fix things.</p>
<p>
	I understand deadlines and priorities, and I know that probably Microsoft just had to ship something at some point, but it really seems that there was a big lack of dogfooding in the WPF case.</p>
<p>
	There&rsquo;s a striking example of this: what was the number one complaint that developers had about WPF since 2006?&hellip; Blurry text and images. And when did Microsoft fix it?&hellip; Only in 2010, when they started using WPF for Visual Studio.</p>
<p>
	Another issue that has been bugging me since I started using WPF was the airspace limitation. It seems that <a href="http://www.jonathanantoine.com/2011/09/24/wpf-4-5-%E2%80%93-part-8-no-more-airspace-problems-integrating-wpf-with-win32/">it&rsquo;s finally going to be fixed in 4.5</a>. Why do I think it&rsquo;s being solved now? Because they probably needed some native WinRT component to play nice with WPF&hellip;</p>
<p>
	I think eating you own dog food is really important. At <a href="http://www.outsystems.com">OutSystems</a> we use our product to build all web applications: the R&amp;D apps (bug tracking, project management, continuous integration&hellip;), the HR apps (directory, vacations, recruiting&hellip;), the sales apps, the marketing apps, the corporate site, the community forums, etc&hellip; And I can say with a great deal of confidence that if we didn&rsquo;t do that, our product wouldn&rsquo;t be half of what it is today.</p>
<p>
	Bottom line: we as developers should always try to eat our own dog food as much as we can. In fact, I think it&rsquo;s so important that it should have been item 13 in the <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Test</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from SubText to BlogEngine.NET]]></title>
    <link href="http://blog.codebeside.org/blog/2011/09/25/migrating-from-subtext-to-blogenginenet"/>
    <updated>2011-09-25T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2011/09/25/migrating-from-subtext-to-blogenginenet</id>
    <content type="html"><![CDATA[<p>
	My blog was running in <a href="http://subtextproject.com">SubText</a>, but I&rsquo;ve recently changed to <a href="http://www.dotnetblogengine.net/">BlogEngine.NET</a>. The main reason for the change was that BlogEngine.NET supports storing the data in plain XML files, without having any dependency to a database. This makes it really easy to customize, as I can develop everything in my local machine, and then just send the files to the server. With SubText this was harder to do, so I ended up doing fewer tweaks, and doing them directly in production, which I didn&rsquo;t like.</p>
<p>
	The migration wasn&rsquo;t as smooth as I though it would be, so here are the steps I took, in case someone needs to go through a similar process:</p>
<ul>
	<li>
		Exporting to BlogML and then importing didn&rsquo;t work correctly. After exporting, I had to <a href="http://garfoot.com/blog/2010/08/importing-blogml-into-wordpress/">convert the content from Base64</a>, replace the &amp;amp;&rsquo;s in the titles with &amp;, and then manually set the author in all post. I also had to set the tags manually in all posts, as in SubText they weren&rsquo;t a separate field but instead were part of the content of the posts. Having the posts on xml files on disk rather than on a database eased this job a lot.</li>
	<li>
		The TinyMCE bundled in BlogEngine.NET doesn&rsquo;t support images, so I had to <a href="http://jerryhuang.net/post/Replace-TinyMCE-with-CKEditor-and-CKFinder-in-BlogEngine-20.aspx">replace it with CKEditor and CKFinder</a>.</li>
	<li>
		The SubText post URL&#39;s have the format /archive/year/month/day/name-of-the-post.aspx, while BlogEngine.NET post URL&#39;s have the format /server/post/year/month/day/name-of-the-post.aspx. I had to set up redirection so the old links would keep working. To do that I&rsquo;ve taken the source code from <a href="http://www.blogenginewall.com/post/2011/04/01/BlogEngine-SEO-Permanent-Redirection-From-Old-URL-To-New-URL.aspx">BlogEngine SEO Redirection extension</a> and changed the comparison to only check prefixes (source code <a href="https://github.com/ovatsus/Blog/commit/a8c8c3f0984507182b2a0139aa2fcbdcb5a51358">here</a>).</li>
	<li>
		Several of the extensions available out there don&rsquo;t work out of the box with the latest version of BlogEngine.NET (2.5):
		<ul>
			<li>
				For the AddThis extension I had to <a href="http://www.mbaldinger.com/post/AddThisNET-Social-Bookmarking-Buttons-for-Blogengine-v5.aspx#id_7b41fd26-f300-4029-b606-60b0cc2f0e6d">add some missing using&rsquo;s to the code</a>, and disable the form validation of the settings page (source code <a href="https://github.com/ovatsus/Blog/commit/931e4f13c76f8505ea65cd6d154fd29354526fbb">here</a>).</li>
			<li>
				To be able to configure widgets in the AllTuts theme, I had to make a small bug fix (as described in Janier Davila comment <a href="http://www.pravesh.me/alltuts-theme-blogenginenet-updated-v25/">here</a>)</li>
		</ul>
	</li>
</ul>
<p>
	After all that work, now I have a setup that allows me to tweak the blog very easily. I have it on GitHub, cloned into my local machine and into the server. I can play around locally, and when I&rsquo;m glad with the results I just need to do a git push locally and then remote desktop to the server to do a git pull and force a reload of the application by touching the web.config.</p>
<p>
	Of course, to protect my passwords and keys, I have to tell git to ignore users.xml, akismetfilter.xml and recaptcha.xml, using <a href="http://blog.pagebakers.nl/2009/01/29/git-ignoring-changes-in-tracked-files/">this procedure</a>. And I also must take care with the email settings that are stored on the global settings.xml file, which forces me to always have that file uncommitted at the server, but other than that, it&rsquo;s orders of magnitude better than editing directly on production.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing Visual Studio 2010 with SharpDevelop 4.1]]></title>
    <link href="http://blog.codebeside.org/blog/2011/04/19/replacing-visual-studio-2010-with-sharpdevelop-4-1"/>
    <updated>2011-04-19T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2011/04/19/replacing-visual-studio-2010-with-sharpdevelop-4-1</id>
    <content type="html"><![CDATA[<p>
	I use Visual Studio 2010 on a daily basis, and I must say that the overall experience is far from good:</p>
<ul>
	<li>
		The find dialog has some really weird and annoying resizing issues.</li>
	<li>
		Sometimes find text simply stops working, never returning any result. Even worst, sometimes it starts returning only the first hit on each file, which of course you only notice the next day because of the bug you introduced in the code base because of that.</li>
	<li>
		It has the habit of recompiling more projects than it really needs to.</li>
	<li>
		Sometimes the simple action of clicking on a text editor to change the caret position stops working, and we can only use the keyboard for that until you restart Visual Studio.</li>
	<li>
		It takes forever to open XAML files (even with the option to always open in full XAML view, not design mode).</li>
	<li>
		It has some serious file cache problems when using custom MSBuild build steps that generate files for compilation. If during a build a generated file is changed while it&rsquo;s opened, the result of the compilation will be as if the file hadn&rsquo;t been changed. If that file is not opened, or we use the MSBuild command line, it works correctly. Just imagine going through a huge list of steps to reproduce some problem only to find out that you&rsquo;re debugging outdated code. It&rsquo;s a real nightmare.</li>
</ul>
<p>
	So I decided to give SharpDeveloper a try, and I was pleasantly surprised:</p>
<ul>
	<li>
		It&rsquo;s pretty fast and responsive, even with big solutions, as long as you turn off source control integration.</li>
	<li>
		I can open .xaml files as fast as .cs files, and the xaml auto complete works sufficiently good.</li>
	<li>
		It builds the big solution I use daily in <strong>half</strong> the time (literally)</li>
	<li>
		It doesn&rsquo;t have the file cache problem</li>
	<li>
		It has an option for building modified projects only, ignoring the dependencies</li>
	<li>
		The latest 4.1 alpha builds allow to see the <a href="http://community.sharpdevelop.net/blogs/marcueusebiu/archive/2011/01/23/presenting-metadata-ctrl-enter-and-expand-references.aspx">metadata of referenced types</a> like Visual Studio does.</li>
</ul>
<p>
	Of course, there are also a few downsides:</p>
<ul>
	<li>
		The usability of the editor auto complete is noticeably lower than Visual Studio IntelliSense.</li>
	<li>
		The shortcut keys aren&rsquo;t customizable, which is a big no no considering that the basic ones like build and toggle breakpoint are different from the ones we&rsquo;re used to from Visual Studio.</li>
	<li>
		Custom debugger visualizers and other very useful add-ins&nbsp; for Visual Studio don&rsquo;t have a SharpDevelop version.</li>
	<li>
		It doesn&rsquo;t have Edit and Continue.</li>
</ul>
<p>
	I had already tried SharpDevelop before in the past, but at the time it seemed to be too limited when compared to Visual Studio. I now think it&rsquo;s good enough to be usable, and as it&rsquo;s open source and the code base looks readable, I&rsquo;m going to try to fix a few quirks to be able to completely replace Visual Studio for my daily coding needs.</p>
<p>
	The first thing I did was to create a SharpDevelop add-in with equivalent functionality to the <a href="http://www.usysware.com/dpack/FileBrowser.aspx">DPack File Browser</a>, which is one of the Visual Studio add-ins that I use the most. I got a working prototype really fast, as the SharpDevelop add-in API is much cleaner that the Visual Studio EnvDTE mess:</p>
<p>
	<img border="0" height="190" src="http://blog.codebeside.org/userfiles/Replacing-Visual-Studio_130FA/image_thumb.png" width="244" /></p>
<p>
	I&nbsp;posted the source code to <a href="https://github.com/ovatsus/CodeBeside.FileBrowser">https://github.com/ovatsus/CodeBeside.FileBrowser</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Platform 5.1.1]]></title>
    <link href="http://blog.codebeside.org/blog/2010/12/18/agile-platform-5-1-1"/>
    <updated>2010-12-18T00:00:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2010/12/18/agile-platform-5-1-1</id>
    <content type="html"><![CDATA[<p>
	We&rsquo;ve recently released version 5.1.1 of the Agile Platform. It&rsquo;s got a lot of great new features and an improved look &amp; feel. And better yet, it&rsquo;s compatible with 5.1.0, so you don&rsquo;t need to upgrade your server.</p>
<p>
	Check the post <a href="http://www.outsystems.com/NetworkForums/ViewTopic.aspx?Topic=New-in-the-Agile-Platform-v5.1.1">New-in-the-Agile-Platform-v5.1.1</a> for more info.</p>
<p>
	<img src="http://www.outsystems.com/CKEditor/Download.aspx?GUID=20101282jg5g1100gj4b27ajcgxdvtt304kynvodja1puurz6" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to change Word 2007 citation style to use square brackets]]></title>
    <link href="http://blog.codebeside.org/blog/2010/09/27/how-to-change-word-2007-citation-style-to-use-square"/>
    <updated>2010-09-27T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2010/09/27/how-to-change-word-2007-citation-style-to-use-square</id>
    <content type="html"><![CDATA[<p>
	This one was not easy to discover, so I&rsquo;m going to post it here for future reference.</p>
<p>
	In C:\Program Files\Microsoft Office\Office12\Bibliography\Style\Iso690Nmerical.xsl change the following lines:</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xsl:template</span> <span class="na">name=</span><span class="s">&quot;templ_prop_OpenBracket&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:param</span> <span class="na">name=</span><span class="s">&quot;LCID&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:variable</span> <span class="na">name=</span><span class="s">&quot;_LCID&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xsl:call-template</span> <span class="na">name=</span><span class="s">&quot;localLCID&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xsl:with-param</span> <span class="na">name=</span><span class="s">&quot;LCID&quot;</span> <span class="na">select=</span><span class="s">&quot;$LCID&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/xsl:call-template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xsl:variable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:value-of</span> <span class="na">select=</span><span class="s">&quot;/*/b:Locals/b:Local[@LCID=$_LCID]/b:General/b:OpenBracket&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:text&gt;</span>[<span class="nt">&lt;/xsl:text&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/xsl:template&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;xsl:template</span> <span class="na">name=</span><span class="s">&quot;templ_prop_CloseBracket&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:param</span> <span class="na">name=</span><span class="s">&quot;LCID&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:variable</span> <span class="na">name=</span><span class="s">&quot;_LCID&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xsl:call-template</span> <span class="na">name=</span><span class="s">&quot;localLCID&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xsl:with-param</span> <span class="na">name=</span><span class="s">&quot;LCID&quot;</span> <span class="na">select=</span><span class="s">&quot;$LCID&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/xsl:call-template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xsl:variable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:value-of</span> <span class="na">select=</span><span class="s">&quot;/*/b:Locals/b:Local[@LCID=$_LCID]/b:General/b:CloseBracket&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/xsl:template&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>
	to this:</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;xsl:template</span> <span class="na">name=</span><span class="s">&quot;templ_prop_OpenBracket&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:param</span> <span class="na">name=</span><span class="s">&quot;LCID&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:variable</span> <span class="na">name=</span><span class="s">&quot;_LCID&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xsl:call-template</span> <span class="na">name=</span><span class="s">&quot;localLCID&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xsl:with-param</span> <span class="na">name=</span><span class="s">&quot;LCID&quot;</span> <span class="na">select=</span><span class="s">&quot;$LCID&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/xsl:call-template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xsl:variable&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--&lt;xsl:value-of select=&quot;/*/b:Locals/b:Local[@LCID=$_LCID]/b:General/b:OpenBracket&quot;/&gt;--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:text&gt;</span>[<span class="nt">&lt;/xsl:text&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/xsl:template&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;xsl:template</span> <span class="na">name=</span><span class="s">&quot;templ_prop_CloseBracket&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:param</span> <span class="na">name=</span><span class="s">&quot;LCID&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:variable</span> <span class="na">name=</span><span class="s">&quot;_LCID&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xsl:call-template</span> <span class="na">name=</span><span class="s">&quot;localLCID&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xsl:with-param</span> <span class="na">name=</span><span class="s">&quot;LCID&quot;</span> <span class="na">select=</span><span class="s">&quot;$LCID&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/xsl:call-template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xsl:variable&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--&lt;xsl:value-of select=&quot;/*/b:Locals/b:Local[@LCID=$_LCID]/b:General/b:CloseBracket&quot;/&gt;--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsl:text&gt;</span>]<span class="nt">&lt;/xsl:text&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/xsl:template&gt;</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Platform Tips & Tricks #7]]></title>
    <link href="http://blog.codebeside.org/blog/2010/08/23/agile-platform-tips-amp-tricks-7"/>
    <updated>2010-08-23T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2010/08/23/agile-platform-tips-amp-tricks-7</id>
    <content type="html"><![CDATA[<h4>
	How to change the page styles dynamically at runtime</h4>
<p>
	<em>[Edit 01/09/2001: Updated the sample to also override the colors in the popups]</em></p>
<p>
	Service Studio gives you a few good options to define style sheets for you pages and emails. Besides the global style sheet that applies to the whole eSpace, you can add a custom style sheet to each web screen and email, and you can even define a custom style sheet for each web block. The platform will take care of including all the style sheets in the html of the page/email according to the following order:</p>
<ol>
	<li>
		The style sheet of all the web blocks directly or indirectly included in the page/email (including referenced ones), from the inner most blocks to the outermost blocks in case of nesting</li>
	<li>
		The eSpace style sheet</li>
	<li>
		The style sheet of the web screen or email.</li>
</ol>
<p>
	In web screens, all those style sheets are deployed to separate files and referenced by the page, while in emails, their content is merged together and included inline in the html for optimal display in the majority of email clients. The platform also applies some post processing to the content of the style sheets to optimize their usage in content delivery networks.</p>
<p>
	All these style sheets are statically defined at design time and can&rsquo;t be dynamically changed at runtime, but it&rsquo;s possible to include more style sheets at runtime that override the static ones. That allows us to do cool things like giving a specific user a different style sheet, changing the color scheme to red when some critical situation is happening, or even letting the user choose the style sheet of his preference, like this:</p>
<p>
	&nbsp;<a href="http://blog.codebeside.org/userfiles/AgilePlatformTipsTricks7_B794/image_4.png"><img alt="image" border="0" height="281" src="http://blog.codebeside.org/userfiles/AgilePlatformTipsTricks7_B794/image_thumb_1.png" style="BORDER-RIGHT-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px" title="image" width="531" /></a></p>
<p>
	To accomplish this, we need to do two things:</p>
<ol>
	<li>
		Make sure the extra style sheets are deployed together with the application</li>
	<li>
		Manipulate the html returned to the browser to include a &lt;link rel=&rdquo;stylesheet&rdquo;&gt; tag in the &lt;head&gt; section</li>
</ol>
<p>
	For #1, we can create the .css text files outside Service Studio and then import them as resources by using the Import Resource operation available in the eSpace tree context menu. However, that&rsquo;s not a very manageable solution. An alternative way is to create a set of web blocks that we don&rsquo;t use in any page, and use them just to define these style sheets. The platform will still deploy their style sheet files, even if the blocks themselves aren&rsquo;t used, and we can then reference those files in the page.</p>
<p>
	For #2, the AddStyleSheetTag action from the HTTPRequestHandler extension seems an obvious choice, but that will put the &lt;link&gt; tag at the beginning of the &lt;head&gt; section. As we want our dynamic style sheets to override the static style sheets, we must include them at the end, so this option doesn&rsquo;t work for us. Fortunately, we can also do this easily by using a little bit of JavaScript. For a complete example, take a look at this eSpace:</p>
<p>
	<a href="http://blog.codebeside.org/userfiles/DynamicStyleSheet.oml">DynamicStyleSheet.oml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Platform Tips & Tricks #6]]></title>
    <link href="http://blog.codebeside.org/blog/2010/08/18/agile-platform-tips-amp-tricks-6"/>
    <updated>2010-08-18T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2010/08/18/agile-platform-tips-amp-tricks-6</id>
    <content type="html"><![CDATA[<h4>
	Calling Screen Actions from custom JavaScript events</h4>
<p>
	Imagine you&rsquo;re using the Tabs_ClientSide from RichWidgets and you&rsquo;re showing a list in each tab. Instead of loading all the lists when the screen is loaded, you want to only populate each list when the corresponding tab is activated. The Tabs_ClientSide already provides a way to call custom JavaScript code on tab activation, so if we could call a Screen Action from JavaScript code, we could make that Screen Action refresh the table on the corresponding tab. So, how can we do that?</p>
<p>
	The AJAX capabilities of the Agile Platform already allow you to trigger the execution of Screen Actions when some standard JavaScript events are raised. For example, if you specify a Screen Action in the OnChange property of an Input widget, when the end-user types in something in the correspondent input displayed by the browser, that Screen Action will be called at the server. To do this, the Agile Platform generates custom JavaScript code that will send an AJAX request to the server when the native onchange event of that input HTML element is triggered. So, if we add an hidden Input widget to the page and on the OnTabActivation parameter of the Tabs_ClientSide we put some JavaScript code to trigger that onchange event manually, we know that the platform will take care of calling the Screen Action specified in the OnChange of that Input widget. This way we can put there the logic to refresh the list inside the tab that was activated in that Screen Action. Unfortunately, we have no way of telling to pass the tab which was activated as a parameter of that Screen Action, and that forces us to have to an hidden Input for each tab, and decide which hidden Input to trigger in JavaScript.</p>
<p>
	Fortunately, there&rsquo;s a simpler way to do this. It involves using the OnNotify property of a Web Block widget, call it by using OsNotifyWidget JavaScript function,&nbsp; and in the associated Screen Action using the NotifyWidgetGetMessage built-in action to get the tab that was activated. Instead of explaining it in detail, I&rsquo;ve made a sample eSpace that exemplifies this scenario. Here it is:</p>
<p>
	<a href="http://blog.codebeside.org/userfiles/FruitsAndVegetables.oml">FruitsAndVegetables.oml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Platform Tips & Tricks #5]]></title>
    <link href="http://blog.codebeside.org/blog/2010/08/18/agile-platform-tips-amp-tricks-5"/>
    <updated>2010-08-18T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2010/08/18/agile-platform-tips-amp-tricks-5</id>
    <content type="html"><![CDATA[<p>
	When you need to change a public element of an eSpace, such as an Action or a Web Block, it&rsquo;s good to know before-hand where that element is being used, so you can anticipate possible problems. To do that, you can go to Service Center and check the References tab in the page relative to your eSpace. There you will find listed all the consumers of your eSpace, and if you click on the Details links next to each consumer eSpace, you can check which specific elements are being used:</p>
<p>
	<a href="http://blog.codebeside.org/userfiles/AgilePlatformTipsTricks5_BFEF/image_2.png"><img alt="image" border="0" height="332" src="http://blog.codebeside.org/userfiles/AgilePlatformTipsTricks5_BFEF/image_thumb.png" style="BORDER-RIGHT-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px" title="image" width="562" /></a></p>
<p>
	<br />
	To help to improve this process, I&rsquo;ve recently published the <a href="http://www.outsystems.com/forge/Component_Detail.aspx?ProjectId=161" title="References Dashboard">References Dashboard</a> component on the OutSystems Network. It has similar functionality to this tab of Service Center, but the consumers are grouped by element instead of by consumer eSpace, allowing for faster search:</p>
<p>
	<a href="http://blog.codebeside.org/userfiles/AgilePlatformTipsTricks5_BFEF/image_4.png"><img alt="image" border="0" height="285" src="http://blog.codebeside.org/userfiles/AgilePlatformTipsTricks5_BFEF/image_thumb_1.png" style="BORDER-RIGHT-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px" title="image" width="562" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Platform Tips & Tricks #4]]></title>
    <link href="http://blog.codebeside.org/blog/2010/03/29/service-studio-tips-amp-tricks-4"/>
    <updated>2010-03-29T00:00:00+01:00</updated>
    <id>http://blog.codebeside.org/blog/2010/03/29/service-studio-tips-amp-tricks-4</id>
    <content type="html"><![CDATA[<p>
	<br />
	If you seen this post on the Agile Network Forums - <a href="http://www.outsystems.com/NetworkForums/ViewTopic.aspx?Topic=Usability-Tip-(Ctrl%2Bshift%2Bclick)">Usability Tip (Ctrl+shift+click)</a> - you already know a quick way to get some extra space between two elements in a flow.</p>
<p>
	From 5.0.2.9 up, there&rsquo;s an even easier way: just drag the the element, and if there&rsquo;s little space, the flow will be automatically arranged:</p>
<p>
	<object height="465" id="scPlayer" width="580"><embed allowfullscreen="true" allowscriptaccess="always" base="http://content.screencast.com/users/ovatsus/folders/Jing/media/0e1c0a75-ec1d-4878-94aa-b912a9f8b096/" bgcolor="#FFFFFF" flashvars="thumb=http://content.screencast.com/users/ovatsus/folders/Jing/media/0e1c0a75-ec1d-4878-94aa-b912a9f8b096/FirstFrame.jpg&amp;containerwidth=580&amp;containerheight=465&amp;content=http://content.screencast.com/users/ovatsus/folders/Jing/media/0e1c0a75-ec1d-4878-94aa-b912a9f8b096/2010-03-29_2259.swf" height="465" loop="loop" menu="menu" quality="high" scale="showall" src="http://content.screencast.com/users/ovatsus/folders/Jing/media/0e1c0a75-ec1d-4878-94aa-b912a9f8b096/jingswfplayer.swf" type="application/x-shockwave-flash" width="580" wmode="Window"></embed></object></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Platform Tips & Tricks #3]]></title>
    <link href="http://blog.codebeside.org/blog/2010/03/20/agile-platform-tips-amp-tricks-3"/>
    <updated>2010-03-20T00:00:00+00:00</updated>
    <id>http://blog.codebeside.org/blog/2010/03/20/agile-platform-tips-amp-tricks-3</id>
    <content type="html"><![CDATA[<p>
	<br />
	In the previous post, I showed an accelerator to easily create a Query for an edit or show screen by dragging an Input Parameter of an Entity Identifier type to the Preparation. In 5.0.2, there&rsquo;s an even easier way to do this.</p>
<p>
	Create the EditRecord or the ShowRecord and drag the Entity on top of it. Then, if there&rsquo;s an Input Parameter of the correspondent Entity Identifier type, a suggestion will appear in the Source Record property:</p>
<p>
	<object height="285" id="scPlayer" width="580"><embed allowfullscreen="true" allowscriptaccess="always" base="http://content.screencast.com/users/ovatsus/folders/Jing/media/e3565709-1573-4752-9b3b-852eab095d1e/" bgcolor="#FFFFFF" flashvars="thumb=http://content.screencast.com/users/ovatsus/folders/Jing/media/e3565709-1573-4752-9b3b-852eab095d1e/FirstFrame.jpg&amp;containerwidth=580&amp;containerheight=285&amp;content=http://content.screencast.com/users/ovatsus/folders/Jing/media/e3565709-1573-4752-9b3b-852eab095d1e/2010-03-20_1142.swf" height="285" loop="loop" menu="menu" quality="high" scale="showall" src="http://content.screencast.com/users/ovatsus/folders/Jing/media/e3565709-1573-4752-9b3b-852eab095d1e/jingswfplayer.swf" type="application/x-shockwave-flash" width="580" wmode="Window"></embed></object></p>
]]></content>
  </entry>
  
</feed>
